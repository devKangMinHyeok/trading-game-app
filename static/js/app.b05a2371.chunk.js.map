{"version":3,"sources":["styles/rootStyles.ts","globalConstant.ts","atom.ts","functions/convertKrNumberType.ts","components/account/MiddleAccount.tsx","components/account/TopAccount.tsx","functions/candleGenerator.ts","components/chart/CandleChart.tsx","components/chart/Chart.tsx","components/position-info/EmptyPositionBox.tsx","components/position-info/position-box/components/CloseButton.tsx","components/position-info/position-box/components/LeverageInfoBox.tsx","components/position-info/position-box/components/OpenPositionInfo.tsx","components/position-info/position-box/components/ProfitInfoBox.tsx","components/position-info/position-box/components/TitleBox.tsx","components/position-info/position-box/PositionBox.tsx","components/position-info/PositionInfoViewer.tsx","components/position-info/PositionInfo.tsx","components/control-panel/shop/Shop.tsx","components/assets/CustomSwitch.tsx","components/control-panel/trade/trade-controller/components/AmountSettingBox.tsx","components/control-panel/trade/trade-controller/components/LeverageControlBox.tsx","components/control-panel/trade/trade-controller/components/LiquidPriceBox.tsx","components/control-panel/trade/trade-controller/components/TotalPriceBox.tsx","components/control-panel/trade/trade-controller/components/TradeButton.tsx","components/control-panel/trade/trade-controller/TradeController.tsx","components/control-panel/trade/trade-controller/LongTradeController.tsx","components/control-panel/trade/trade-controller/ShortTradeController.tsx","components/control-panel/trade/Trade.tsx","components/control-panel/ControlPanel.tsx","components/root-control-button/RootControlButton.tsx","components/Display.tsx","App.tsx"],"names":["SCREEN_WIDTH","Dimensions","get","width","rootStyles","StyleSheet","create","display","flex","backgroundColor","topAccount","justifyContent","chart","middleAccount","flexDirection","alignItems","positionInfo","controlPanel","trade","shop","rootControlButton","LEVERAGE_UNITS","label","value","INITIAL_CANDLE_SET","x","Date","open","close","high","low","candleDataState","atom","key","default","turnNumberState","isLongControllerActiveState","isCandleMovingState","lastClosePriceState","lastOpenPriceState","longLiquidState","shortLiquidState","cashAccountState","longAccountState","positionActive","openPrice","liquidPrice","leverage","openPositionAmount","openPositionValue","currentPositionValue","shortAccountState","longAccountDetailState","selector","longAccount","unrealizedPnl","profitRate","totalAsset","shortAccountDetailState","shortAccount","totalFutureAccountState","longAccountDetail","shortAccountDetail","totalAccountState","cashAccount","futureAccount","openValuation","cash","futureValuation","convertKrNumberType","number","toString","replace","memo","totalAccount","useRecoilValue","View","style","Text","Math","ceil","fontSize","toFixed","candleGenerator","time","lastClosePrice","numberPerUnit","random_gap","previousCandle","candleSet","i","newCandle","cloneDeep","newClose","random","newHigh","newLow","push","CandleChart","turnNumber","useRecoilState","candleData","setCandleData","setIsCandleMoving","setLastClosePrice","lastOpenPrice","setLastOpenPrice","setLongAccount","setShortAccount","resetLongAccount","useResetRecoilState","resetShortAccount","useState","chartXDomain","setChartXDomain","INITIAL_CANDLE_LOW","LAST_OF_INITIAL_CANDLE_HIGH","chartYDomain","setChartYDomain","updateCandleData","index","lastIndex","setTimeout","prev","newData","slice","length","newLog","useEffect","timers","lastDate","nextDate","setDate","getDate","lastPrice","newCandleSet","forEach","ele","clearTimeout","targetCandles","startDate","lowestPrice","Number","highestPrice","domainPadding","containerComponent","cursorLabel","datum","round","y","dependentAxis","grid","stroke","strokeWidth","candleRatio","data","d","candleColors","positive","negative","domain","Chart","closeHandler","TouchableOpacity","height","onPress","isLong","PositionBox","accountDetail","isCandleMoving","setCashAccount","Shop","switchStyle","disabled","selectedValue","thisValue","container","opacity","box","padding","options","setValueFunction","map","evt","newValue","amountRate","setAmountRate","minimumValue","maximumValue","step","minimumTrackTintColor","maximumTrackTintColor","onValueChange","tapToSeek","activeLeverage","setLeverage","isLongSelected","longLiquid","shortLiquid","totalPrice","coinAmount","buttonHandler","isBuy","TradeController","setLongLiquid","setShortLiquid","setTotalPrice","setCoinAmount","buyButtonHandler","useCallback","newOpenPositionValue","alert","sellButtonHandler","targetCash","ableCoinAmount","floor","TRANSACTION_FEE_RATE","LongTradeController","ShortTradeController","Trade","setIsLongSelected","ControlPanel","ScrollView","pagingEnabled","horizontal","showsHorizontalScrollIndicator","RootControlButton","setTurnNumber","resetCashAccount","Display","App"],"mappings":"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","file":"static/js/app.b05a2371.chunk.js","sourcesContent":["import { Dimensions, StyleSheet } from \"react-native\";\r\n\r\nconst { width: SCREEN_WIDTH } = Dimensions.get(\"window\");\r\n\r\nconst rootStyles = StyleSheet.create({\r\n  display: {\r\n    flex: 1,\r\n    backgroundColor: \"#fff\",\r\n  },\r\n\r\n  topAccount: {\r\n    flex: 0.4,\r\n    justifyContent: \"flex-end\",\r\n    backgroundColor: \"#dbffe3\",\r\n  },\r\n\r\n  chart: {\r\n    flex: 1.3,\r\n    justifyContent: \"center\",\r\n  },\r\n\r\n  middleAccount: {\r\n    flex: 0.3,\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-around\",\r\n    alignItems: \"center\",\r\n    backgroundColor: \"orange\",\r\n  },\r\n\r\n  positionInfo: {\r\n    flex: 0.8,\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-around\",\r\n    backgroundColor: \"green\",\r\n  },\r\n\r\n  controlPanel: {\r\n    flex: 1.7,\r\n    backgroundColor: \"pink\",\r\n  },\r\n\r\n  trade: {\r\n    width: SCREEN_WIDTH * 0.95,\r\n    backgroundColor: \"grey\",\r\n  },\r\n\r\n  shop: {\r\n    width: SCREEN_WIDTH * 0.95,\r\n    justifyContent: \"center\",\r\n    backgroundColor: \"purple\",\r\n  },\r\n\r\n  rootControlButton: {\r\n    flex: 0.5,\r\n    backgroundColor: \"blue\",\r\n    flexDirection: \"row\",\r\n  },\r\n});\r\n\r\nexport default rootStyles;\r\n","import { ICandleStick } from \"./interfaces/interface\";\r\n\r\n// Chart\r\nexport const SPLIT_UNIT_OF_CANDLE = 20;\r\nexport const CANDLE_MOVING_UNIT_MS = 150;\r\nexport const INITIAL_CANDLE_OPEN = 100;\r\nexport const INITIAL_CANDLE_CLOSE = 110;\r\nexport const INITIAL_CANDLE_HIGH = 120;\r\nexport const INITIAL_CANDLE_LOW = 90;\r\nexport const LAST_OF_INITIAL_CANDLE_OPEN = 160;\r\nexport const LAST_OF_INITIAL_CANDLE_CLOSE = 150;\r\nexport const LAST_OF_INITIAL_CANDLE_HIGH = 170;\r\nexport const LAST_OF_INITIAL_CANDLE_LOW = 140;\r\nexport const CHART_X_DOMAIN_LENGTH = 15;\r\nexport const CHART_Y_DOMAIN_PADDING = 15;\r\n\r\n// Account\r\nexport const INITIAL_CASH = 1000000;\r\nexport const TRANSACTION_FEE_RATE = 0.04;\r\n\r\n// Leverage\r\nexport const INIT_LEVERAGE = 1;\r\nexport const LEVERAGE_MIN = 1;\r\nexport const LEVERAGE_MAX = 50;\r\n\r\nexport const LEVERAGE_UNITS = [\r\n  { label: \"x1\", value: 1 },\r\n  { label: \"x2\", value: 2 },\r\n  { label: \"x3\", value: 3 },\r\n  { label: \"x5\", value: 5 },\r\n  { label: \"x10\", value: 10 },\r\n  { label: \"x25\", value: 25 },\r\n  { label: \"x50\", value: 50 },\r\n];\r\nexport const INITIAL_CANDLE_SET: ICandleStick[] = [\r\n  {\r\n    x: new Date(2022, 0, 1),\r\n    open: INITIAL_CANDLE_OPEN,\r\n    close: INITIAL_CANDLE_CLOSE,\r\n    high: INITIAL_CANDLE_HIGH,\r\n    low: INITIAL_CANDLE_LOW,\r\n  },\r\n  { x: new Date(2022, 0, 2), open: 110, close: 130, high: 130, low: 100 },\r\n  { x: new Date(2022, 0, 3), open: 130, close: 100, high: 140, low: 90 },\r\n  { x: new Date(2022, 0, 4), open: 100, close: 125, high: 150, low: 100 },\r\n  { x: new Date(2022, 0, 5), open: 125, close: 150, high: 170, low: 120 },\r\n  { x: new Date(2022, 0, 6), open: 150, close: 130, high: 160, low: 120 },\r\n  { x: new Date(2022, 0, 7), open: 130, close: 180, high: 200, low: 100 },\r\n  { x: new Date(2022, 0, 8), open: 180, close: 200, high: 200, low: 160 },\r\n  { x: new Date(2022, 0, 9), open: 200, close: 160, high: 210, low: 150 },\r\n  { x: new Date(2022, 0, 10), open: 160, close: 150, high: 200, low: 150 },\r\n  { x: new Date(2022, 0, 11), open: 150, close: 120, high: 160, low: 110 },\r\n  { x: new Date(2022, 0, 12), open: 120, close: 130, high: 140, low: 110 },\r\n  { x: new Date(2022, 0, 13), open: 130, close: 160, high: 180, low: 130 },\r\n  {\r\n    x: new Date(2022, 0, 14),\r\n    open: 160,\r\n    close: LAST_OF_INITIAL_CANDLE_OPEN,\r\n    high: 200,\r\n    low: 150,\r\n  },\r\n  {\r\n    x: new Date(2022, 0, 15),\r\n    open: LAST_OF_INITIAL_CANDLE_OPEN,\r\n    close: LAST_OF_INITIAL_CANDLE_CLOSE,\r\n    high: LAST_OF_INITIAL_CANDLE_HIGH,\r\n    low: LAST_OF_INITIAL_CANDLE_LOW,\r\n  },\r\n];\r\n","import { CandlestickData, UTCTimestamp } from \"lightweight-charts\";\r\nimport { atom, selector } from \"recoil\";\r\nimport {\r\n  INITIAL_CANDLE_CLOSE,\r\n  INITIAL_CANDLE_HIGH,\r\n  INITIAL_CANDLE_SET,\r\n  LAST_OF_INITIAL_CANDLE_CLOSE,\r\n  LAST_OF_INITIAL_CANDLE_HIGH,\r\n  LAST_OF_INITIAL_CANDLE_LOW,\r\n  LAST_OF_INITIAL_CANDLE_OPEN,\r\n} from \"./globalConstant\";\r\nimport {\r\n  IFutureAccount,\r\n  IFutureAccountDetail,\r\n  ITotalAccount,\r\n  ITotalFutureAccount,\r\n} from \"./interfaces/interface\";\r\n\r\n// UI 시스템\r\n\r\n// 게임 시스템\r\nexport const candleDataState = atom({\r\n  key: \"candleDataState\",\r\n  default: INITIAL_CANDLE_SET,\r\n});\r\n\r\nexport const turnNumberState = atom({\r\n  key: \"turnNumberState\",\r\n  default: 1,\r\n});\r\n\r\nexport const isLongControllerActiveState = atom({\r\n  key: \"isLongControllerActiveState\",\r\n  default: true,\r\n});\r\n\r\nexport const isCandleMovingState = atom({\r\n  key: \"isCandleMovingState\",\r\n  default: false,\r\n});\r\n\r\nexport const lastClosePriceState = atom({\r\n  key: \"lastClosePriceState\",\r\n  default: LAST_OF_INITIAL_CANDLE_CLOSE,\r\n});\r\n\r\nexport const lastOpenPriceState = atom({\r\n  key: \"lastOpenPriceState\",\r\n  default: LAST_OF_INITIAL_CANDLE_OPEN,\r\n});\r\n\r\nexport const lastHighPriceState = atom({\r\n  key: \"lastHighPriceState\",\r\n  default: LAST_OF_INITIAL_CANDLE_HIGH,\r\n});\r\n\r\nexport const lastLowPriceState = atom({\r\n  key: \"lastLowPriceState\",\r\n  default: LAST_OF_INITIAL_CANDLE_LOW,\r\n});\r\n\r\nexport const longLiquidState = atom({\r\n  key: \"longLiquidState\",\r\n  default: 0,\r\n});\r\n\r\nexport const shortLiquidState = atom({\r\n  key: \"shortLiquidState\",\r\n  default: 0,\r\n});\r\n\r\n// 게좌 시스템\r\nexport const cashAccountState = atom({\r\n  key: \"accountState\",\r\n  default: 1000000,\r\n});\r\n\r\nexport const longAccountState = atom({\r\n  key: \"longAccountState\",\r\n  default: {\r\n    positionActive: false,\r\n    openPrice: 0,\r\n    liquidPrice: 0,\r\n    leverage: 1,\r\n    openPositionAmount: 0,\r\n    openPositionValue: 0,\r\n    currentPositionValue: 0,\r\n  } as IFutureAccount,\r\n});\r\n\r\nexport const shortAccountState = atom({\r\n  key: \"shortAccountState\",\r\n  default: {\r\n    positionActive: false,\r\n    openPrice: 0,\r\n    liquidPrice: 0,\r\n    leverage: 1,\r\n    openPositionAmount: 0,\r\n    openPositionValue: 0,\r\n    currentPositionValue: 0,\r\n  } as IFutureAccount,\r\n});\r\n\r\nexport const longAccountDetailState = selector({\r\n  key: \"longAccountDetailState\",\r\n  get: ({ get }) => {\r\n    const longAccount = get(longAccountState);\r\n    const unrealizedPnl =\r\n      longAccount.leverage *\r\n      (longAccount.currentPositionValue - longAccount.openPositionValue);\r\n    return {\r\n      positionActive: longAccount.positionActive,\r\n      openPrice: longAccount.openPrice,\r\n      liquidPrice: longAccount.liquidPrice,\r\n      leverage: longAccount.leverage,\r\n      openPositionAmount: longAccount.openPositionAmount,\r\n      openPositionValue: longAccount.openPositionValue,\r\n      currentPositionValue: longAccount.currentPositionValue,\r\n      unrealizedPnl,\r\n      profitRate: unrealizedPnl / longAccount.openPositionValue,\r\n      totalAsset: unrealizedPnl + longAccount.openPositionValue,\r\n    } as IFutureAccountDetail;\r\n  },\r\n});\r\n\r\nexport const shortAccountDetailState = selector({\r\n  key: \"shortAccountDetailState\",\r\n  get: ({ get }) => {\r\n    const shortAccount = get(shortAccountState);\r\n    const unrealizedPnl =\r\n      shortAccount.leverage *\r\n      (shortAccount.openPositionValue - shortAccount.currentPositionValue);\r\n    return {\r\n      positionActive: shortAccount.positionActive,\r\n      openPrice: shortAccount.openPrice,\r\n      liquidPrice: shortAccount.liquidPrice,\r\n      leverage: shortAccount.leverage,\r\n      openPositionAmount: shortAccount.openPositionAmount,\r\n      openPositionValue: shortAccount.openPositionValue,\r\n      currentPositionValue: shortAccount.currentPositionValue,\r\n      unrealizedPnl,\r\n      profitRate: unrealizedPnl / shortAccount.openPositionValue,\r\n      totalAsset: unrealizedPnl + shortAccount.openPositionValue,\r\n    } as IFutureAccountDetail;\r\n  },\r\n});\r\n\r\nexport const totalFutureAccountState = selector({\r\n  key: \"futureAccountState\",\r\n  get: ({ get }) => {\r\n    const longAccountDetail = get(longAccountDetailState);\r\n    const shortAccountDetail = get(shortAccountDetailState);\r\n\r\n    const openPositionValue =\r\n      longAccountDetail.openPositionValue +\r\n      shortAccountDetail.openPositionValue;\r\n    const currentPositionValue =\r\n      longAccountDetail.currentPositionValue +\r\n      shortAccountDetail.currentPositionValue;\r\n    const unrealizedPnl =\r\n      longAccountDetail.unrealizedPnl + shortAccountDetail.unrealizedPnl;\r\n    return {\r\n      positionActive:\r\n        longAccountDetail.positionActive || shortAccountDetail.positionActive,\r\n      openPositionValue,\r\n      currentPositionValue,\r\n      unrealizedPnl,\r\n      profitRate: unrealizedPnl / openPositionValue,\r\n      totalAsset: unrealizedPnl + openPositionValue,\r\n    } as ITotalFutureAccount;\r\n  },\r\n});\r\n\r\nexport const totalAccountState = selector({\r\n  key: \"totalAccountState\",\r\n  get: ({ get }) => {\r\n    const cashAccount = get(cashAccountState);\r\n    const futureAccount = get(totalFutureAccountState);\r\n\r\n    const openValuation = futureAccount.openPositionValue + cashAccount;\r\n    const totalAsset = cashAccount + futureAccount.totalAsset;\r\n    const unrealizedPnl = totalAsset - openValuation;\r\n    return {\r\n      cash: cashAccount,\r\n      futureValuation: futureAccount.totalAsset,\r\n      totalAsset,\r\n      unrealizedPnl,\r\n      profitRate: unrealizedPnl / openValuation,\r\n    } as ITotalAccount;\r\n  },\r\n});\r\n","const convertKrNumberType = (number: number) => {\r\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n};\r\n\r\nexport default convertKrNumberType;\r\n","import { memo } from \"react\";\r\nimport { Text, View } from \"react-native\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { totalAccountState } from \"../../atom\";\r\nimport convertKrNumberType from \"../../functions/convertKrNumberType\";\r\nimport rootStyles from \"../../styles/rootStyles\";\r\n\r\nfunction MiddleAccount() {\r\n  const totalAccount = useRecoilValue(totalAccountState);\r\n  return (\r\n    <View style={rootStyles.middleAccount}>\r\n      <Text>\r\n        선물 평가 자산:{\" \"}\r\n        {convertKrNumberType(Math.ceil(totalAccount.futureValuation))}원\r\n      </Text>\r\n      <Text>\r\n        보유 현금: {convertKrNumberType(Math.ceil(totalAccount.cash))}원\r\n      </Text>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default memo(MiddleAccount);\r\n","import { memo } from \"react\";\r\nimport { Text, View } from \"react-native\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { totalAccountState } from \"../../atom\";\r\nimport convertKrNumberType from \"../../functions/convertKrNumberType\";\r\nimport { INITIAL_CASH } from \"../../globalConstant\";\r\nimport rootStyles from \"../../styles/rootStyles\";\r\n\r\nfunction TopAccount() {\r\n  const totalAccount = useRecoilValue(totalAccountState);\r\n\r\n  return (\r\n    <View style={rootStyles.topAccount}>\r\n      <Text style={{ fontSize: 16 }}>\r\n        평가자산:\r\n        {convertKrNumberType(Math.ceil(totalAccount.totalAsset))}원{\" \"}\r\n        {(\r\n          ((totalAccount.totalAsset - INITIAL_CASH) / INITIAL_CASH) *\r\n          100\r\n        ).toFixed(2)}\r\n        %\r\n      </Text>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default memo(TopAccount);\r\n","import { cloneDeep, random } from \"lodash\";\r\nimport { ICandleStick } from \"../interfaces/interface\";\r\n\r\nconst candleGenerator = (\r\n  time: Date,\r\n  lastClosePrice: number,\r\n  numberPerUnit: number,\r\n  random_gap: number = 0.05\r\n) => {\r\n  let previousCandle: ICandleStick = {\r\n    x: time,\r\n    open: lastClosePrice,\r\n    high: lastClosePrice,\r\n    low: lastClosePrice,\r\n    close: lastClosePrice,\r\n  };\r\n  const candleSet = [previousCandle];\r\n\r\n  for (let i = 0; i < numberPerUnit; i++) {\r\n    const newCandle = cloneDeep(previousCandle);\r\n\r\n    const newClose =\r\n      newCandle.close * random(1 - random_gap, 1 + random_gap, true);\r\n    const newHigh = newCandle.high < newClose ? newClose : newCandle.high;\r\n    const newLow = newCandle.low > newClose ? newClose : newCandle.low;\r\n\r\n    newCandle.close = newClose;\r\n    newCandle.high = newHigh;\r\n    newCandle.low = newLow;\r\n\r\n    previousCandle = newCandle;\r\n    candleSet.push(newCandle);\r\n  }\r\n\r\n  return candleSet;\r\n};\r\n\r\nexport default candleGenerator;\r\n","import { cloneDeep, round } from \"lodash\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { View } from \"react-native\";\r\nimport { useRecoilState, useRecoilValue, useResetRecoilState } from \"recoil\";\r\nimport { DomainTuple } from \"victory-core\";\r\nimport {\r\n  VictoryAxis,\r\n  VictoryCandlestick,\r\n  VictoryChart,\r\n  VictoryCursorContainer,\r\n  VictoryLine,\r\n  VictoryLabel,\r\n} from \"victory-native\";\r\nimport {\r\n  candleDataState,\r\n  isCandleMovingState,\r\n  lastClosePriceState,\r\n  lastOpenPriceState,\r\n  longAccountDetailState,\r\n  longAccountState,\r\n  shortAccountDetailState,\r\n  shortAccountState,\r\n  turnNumberState,\r\n} from \"../../atom\";\r\nimport candleGenerator from \"../../functions/candleGenerator\";\r\nimport {\r\n  CANDLE_MOVING_UNIT_MS,\r\n  CHART_X_DOMAIN_LENGTH,\r\n  CHART_Y_DOMAIN_PADDING,\r\n  INITIAL_CANDLE_LOW,\r\n  LAST_OF_INITIAL_CANDLE_HIGH,\r\n  SPLIT_UNIT_OF_CANDLE,\r\n} from \"../../globalConstant\";\r\nimport { ICandleStick } from \"../../interfaces/interface\";\r\n\r\nfunction CandleChart() {\r\n  const turnNumber = useRecoilValue(turnNumberState);\r\n  const [candleData, setCandleData] = useRecoilState(candleDataState);\r\n  const [isCandleMoving, setIsCandleMoving] =\r\n    useRecoilState(isCandleMovingState);\r\n  const [lastClosePrice, setLastClosePrice] =\r\n    useRecoilState(lastClosePriceState);\r\n  const [lastOpenPrice, setLastOpenPrice] = useRecoilState(lastOpenPriceState);\r\n\r\n  const [longAccount, setLongAccount] = useRecoilState(longAccountState);\r\n  const [shortAccount, setShortAccount] = useRecoilState(shortAccountState);\r\n  const longAccountDetail = useRecoilValue(longAccountDetailState);\r\n  const shortAccountDetail = useRecoilValue(shortAccountDetailState);\r\n  const resetLongAccount = useResetRecoilState(longAccountState);\r\n  const resetShortAccount = useResetRecoilState(shortAccountState);\r\n\r\n  const [chartXDomain, setChartXDomain] = useState<DomainTuple>([\r\n    new Date(2022, 0, 1),\r\n    new Date(2022, 0, 15),\r\n  ]);\r\n  const [chartYDomain, setChartYDomain] = useState<DomainTuple>([\r\n    INITIAL_CANDLE_LOW - CHART_Y_DOMAIN_PADDING,\r\n    LAST_OF_INITIAL_CANDLE_HIGH + CHART_Y_DOMAIN_PADDING,\r\n  ]);\r\n\r\n  const updateCandleData = (\r\n    newCandle: ICandleStick,\r\n    index: number,\r\n    lastIndex: number\r\n  ) => {\r\n    return setTimeout(() => {\r\n      setCandleData((prev) => {\r\n        const newData = [...prev];\r\n        if (newData.slice(-1)[0].x.toString() == newCandle.x.toString()) {\r\n          newData[newData.length - 1] = newCandle;\r\n        } else {\r\n          newData.push(newCandle);\r\n        }\r\n        return newData;\r\n      });\r\n\r\n      setLastClosePrice(newCandle.close);\r\n\r\n      if (longAccountDetail.positionActive) {\r\n        setLongAccount((prev) => {\r\n          const newLog = cloneDeep(prev);\r\n          newLog.currentPositionValue =\r\n            newCandle.close * newLog.openPositionAmount;\r\n          return newLog;\r\n        });\r\n        if (longAccountDetail.liquidPrice >= newCandle.low) {\r\n          resetLongAccount();\r\n        }\r\n      }\r\n\r\n      if (shortAccountDetail.positionActive) {\r\n        setShortAccount((prev) => {\r\n          const newLog = cloneDeep(prev);\r\n          newLog.currentPositionValue =\r\n            newCandle.close * newLog.openPositionAmount;\r\n          return newLog;\r\n        });\r\n        if (shortAccountDetail.liquidPrice <= newCandle.high) {\r\n          resetShortAccount();\r\n        }\r\n      }\r\n\r\n      if (index === lastIndex) {\r\n        setIsCandleMoving(false);\r\n      }\r\n    }, CANDLE_MOVING_UNIT_MS * index);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const timers: NodeJS.Timeout[] = [];\r\n    if (turnNumber > 1) {\r\n      const lastDate = candleData.slice(-1)[0].x;\r\n      const nextDate = new Date(lastDate);\r\n      nextDate.setDate(lastDate.getDate() + 1);\r\n      const lastPrice = candleData.slice(-1)[0].close;\r\n      const newCandleSet = candleGenerator(\r\n        nextDate,\r\n        lastPrice,\r\n        SPLIT_UNIT_OF_CANDLE\r\n      );\r\n      setLastOpenPrice(newCandleSet[0].open);\r\n      for (let i = 0; i < newCandleSet.length; i++) {\r\n        const newCandle = newCandleSet[i];\r\n        timers.push(updateCandleData(newCandle, i, newCandleSet.length - 1));\r\n      }\r\n\r\n      return () => {\r\n        timers.forEach((ele) => clearTimeout(ele));\r\n      };\r\n    }\r\n  }, [turnNumber]);\r\n\r\n  useEffect(() => {\r\n    const targetCandles = candleData.slice(-CHART_X_DOMAIN_LENGTH);\r\n\r\n    // x domain\r\n    const startDate = targetCandles[0].x;\r\n    const lastDate = new Date(startDate);\r\n    lastDate.setDate(startDate.getDate() + CHART_X_DOMAIN_LENGTH);\r\n    setChartXDomain([startDate, lastDate]);\r\n\r\n    // y domain\r\n    let lowestPrice = Number(chartYDomain[0]) + CHART_Y_DOMAIN_PADDING;\r\n    let highestPrice = Number(chartYDomain[1]) - CHART_Y_DOMAIN_PADDING;\r\n\r\n    targetCandles.forEach((ele) => {\r\n      if (ele.low < lowestPrice) {\r\n        lowestPrice = ele.low;\r\n      }\r\n      if (ele.high > highestPrice) {\r\n        highestPrice = ele.high;\r\n      }\r\n    });\r\n\r\n    setChartYDomain([\r\n      lowestPrice - CHART_Y_DOMAIN_PADDING,\r\n      highestPrice + CHART_Y_DOMAIN_PADDING,\r\n    ]);\r\n  }, [candleData]);\r\n\r\n  return (\r\n    <View>\r\n      <VictoryChart\r\n        domainPadding={{ x: 10 }}\r\n        containerComponent={\r\n          <VictoryCursorContainer\r\n            cursorLabel={({ datum }) =>\r\n              \"     price :   \" + `${round(datum.y, 1)}`\r\n            }\r\n          />\r\n        }\r\n      >\r\n        <VictoryAxis\r\n          dependentAxis\r\n          style={{ grid: { stroke: \"#b6b6b6\", strokeWidth: 0.5 } }}\r\n        />\r\n\r\n        <VictoryCandlestick\r\n          candleRatio={0.85}\r\n          style={{\r\n            data: {\r\n              strokeWidth: 1,\r\n              stroke: (d: any) => (d.close < d.open ? \"#c43a31\" : \"#1759bb\"),\r\n            },\r\n          }}\r\n          candleColors={{ positive: \"#c43a31\", negative: \"#1759bb\" }}\r\n          data={candleData}\r\n          domain={{\r\n            x: chartXDomain,\r\n            y: chartYDomain,\r\n          }}\r\n        />\r\n        <VictoryLine\r\n          domain={{\r\n            x: chartXDomain,\r\n            y: chartYDomain,\r\n          }}\r\n          y={() => lastClosePrice}\r\n          // labels={({ datum }) => \"라인\"}\r\n          style={{\r\n            data: {\r\n              stroke: (d: any) =>\r\n                lastClosePrice > lastOpenPrice ? \"#c43a31\" : \"#1759bb\",\r\n              strokeWidth: 0.5,\r\n            },\r\n          }}\r\n        />\r\n      </VictoryChart>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default CandleChart;\r\n","import { Text, View } from \"react-native\";\r\n\r\nimport rootStyles from \"../../styles/rootStyles\";\r\nimport CandleChart from \"./CandleChart\";\r\n\r\nfunction Chart() {\r\n  return (\r\n    <View style={rootStyles.chart}>\r\n      <CandleChart />\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default Chart;\r\n","import { memo } from \"react\";\r\nimport { Text, View } from \"react-native\";\r\n\r\nfunction EmptyPositionBox() {\r\n  return (\r\n    <View>\r\n      <Text>포지션이 없습니다.</Text>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default memo(EmptyPositionBox);\r\n","import { memo } from \"react\";\r\nimport { Text, TouchableOpacity } from \"react-native\";\r\n\r\ninterface CloseButtonProps {\r\n  closeHandler: () => void;\r\n}\r\n\r\nfunction CloseButton({ closeHandler }: CloseButtonProps) {\r\n  return (\r\n    <TouchableOpacity\r\n      style={{ backgroundColor: \"red\", height: \"100%\" }}\r\n      onPress={closeHandler}\r\n    >\r\n      <Text>Close</Text>\r\n    </TouchableOpacity>\r\n  );\r\n}\r\n\r\nexport default memo(CloseButton);\r\n","import { memo } from \"react\";\r\nimport { Text, View } from \"react-native\";\r\n\r\ninterface LeverageInfoBoxProps {\r\n  leverage: number;\r\n}\r\n\r\nfunction LeverageInfoBox({ leverage }: LeverageInfoBoxProps) {\r\n  return (\r\n    <View>\r\n      <Text>레버리지 : x{leverage}</Text>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default memo(LeverageInfoBox);\r\n","import { memo } from \"react\";\r\nimport { Text, View } from \"react-native\";\r\nimport convertKrNumberType from \"../../../../functions/convertKrNumberType\";\r\n\r\ninterface OpenPositionInfoProps {\r\n  openPositionValue: number;\r\n}\r\n\r\nfunction OpenPositionInfo({ openPositionValue }: OpenPositionInfoProps) {\r\n  return (\r\n    <View>\r\n      <Text>\r\n        진입 포지션 가치 : {convertKrNumberType(Math.ceil(openPositionValue))}원\r\n      </Text>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default memo(OpenPositionInfo);\r\n","import { memo } from \"react\";\r\nimport { Text, View } from \"react-native\";\r\nimport convertKrNumberType from \"../../../../functions/convertKrNumberType\";\r\n\r\ninterface ProfitInfoBoxProps {\r\n  unrealizedPnl: number;\r\n  profitRate: number;\r\n}\r\n\r\nfunction ProfitInfoBox({ unrealizedPnl, profitRate }: ProfitInfoBoxProps) {\r\n  return (\r\n    <View>\r\n      <Text>\r\n        미실현 손익 : {convertKrNumberType(Math.ceil(unrealizedPnl))}원{\" \"}\r\n        {(profitRate * 100).toFixed(2)}%\r\n      </Text>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default memo(ProfitInfoBox);\r\n","import { memo } from \"react\";\r\nimport { Text, View } from \"react-native\";\r\n\r\ninterface TitleBoxProps {\r\n  isLong: boolean;\r\n}\r\n\r\nfunction TitleBox({ isLong }: TitleBoxProps) {\r\n  return (\r\n    <View>\r\n      <Text>{isLong ? \"Long\" : \"Short\"}</Text>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default memo(TitleBox);\r\n","import { View } from \"react-native\";\r\nimport { IFutureAccountDetail } from \"../../../interfaces/interface\";\r\nimport CloseButton from \"./components/CloseButton\";\r\nimport LeverageInfoBox from \"./components/LeverageInfoBox\";\r\nimport OpenPositionInfo from \"./components/OpenPositionInfo\";\r\nimport ProfitInfoBox from \"./components/ProfitInfoBox\";\r\nimport TitleBox from \"./components/TitleBox\";\r\n\r\ninterface PositionBoxProps {\r\n  isLong: boolean;\r\n  accountDetail: IFutureAccountDetail;\r\n  closeHandler: () => void;\r\n}\r\n\r\nfunction PositionBox({\r\n  accountDetail,\r\n  closeHandler,\r\n  isLong,\r\n}: PositionBoxProps) {\r\n  return (\r\n    <View>\r\n      <TitleBox isLong={isLong} />\r\n      <LeverageInfoBox leverage={accountDetail.leverage} />\r\n      <OpenPositionInfo openPositionValue={accountDetail.openPositionValue} />\r\n      <ProfitInfoBox\r\n        unrealizedPnl={accountDetail.unrealizedPnl}\r\n        profitRate={accountDetail.profitRate}\r\n      />\r\n      <CloseButton closeHandler={closeHandler} />\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default PositionBox;\r\n","import { memo } from \"react\";\r\nimport { IFutureAccountDetail } from \"../../interfaces/interface\";\r\nimport EmptyPositionBox from \"./EmptyPositionBox\";\r\nimport PositionBox from \"./position-box/PositionBox\";\r\n\r\ninterface PositionInfoViewerProps {\r\n  positionActive: boolean;\r\n  accountDetail: IFutureAccountDetail;\r\n  closeHandler: () => void;\r\n  isLong: boolean;\r\n}\r\n\r\nfunction PositionInfoViewer({\r\n  positionActive,\r\n  accountDetail,\r\n  closeHandler,\r\n  isLong,\r\n}: PositionInfoViewerProps) {\r\n  return (\r\n    <>\r\n      {positionActive ? (\r\n        <PositionBox\r\n          accountDetail={accountDetail}\r\n          closeHandler={closeHandler}\r\n          isLong={isLong}\r\n        />\r\n      ) : (\r\n        <EmptyPositionBox />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default memo(PositionInfoViewer);\r\n","import { memo } from \"react\";\r\nimport { View } from \"react-native\";\r\nimport { useRecoilState, useRecoilValue, useResetRecoilState } from \"recoil\";\r\nimport {\r\n  cashAccountState,\r\n  isCandleMovingState,\r\n  lastClosePriceState,\r\n  longAccountDetailState,\r\n  longAccountState,\r\n  shortAccountDetailState,\r\n  shortAccountState,\r\n} from \"../../atom\";\r\nimport rootStyles from \"../../styles/rootStyles\";\r\nimport EmptyPositionBox from \"./EmptyPositionBox\";\r\nimport PositionBox from \"./position-box/PositionBox\";\r\nimport PositionInfoViewer from \"./PositionInfoViewer\";\r\n\r\nfunction PositionInfo() {\r\n  const isCandleMoving = useRecoilValue(isCandleMovingState);\r\n\r\n  const [cashAccount, setCashAccount] = useRecoilState(cashAccountState);\r\n  const longAccountDetail = useRecoilValue(longAccountDetailState);\r\n  const resetLongAccount = useResetRecoilState(longAccountState);\r\n  const shortAccountDetail = useRecoilValue(shortAccountDetailState);\r\n  const resetShortAccount = useResetRecoilState(shortAccountState);\r\n  const lastClosePrice = useRecoilValue(lastClosePriceState);\r\n\r\n  const longCloseHandler = () => {\r\n    if (!isCandleMoving) {\r\n      setCashAccount((prev) => prev + longAccountDetail.totalAsset);\r\n      resetLongAccount();\r\n    }\r\n  };\r\n\r\n  const shortCloseHandler = () => {\r\n    if (!isCandleMoving) {\r\n      setCashAccount((prev) => prev + shortAccountDetail.totalAsset);\r\n      resetShortAccount();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={rootStyles.positionInfo}>\r\n      <PositionInfoViewer\r\n        positionActive={longAccountDetail.positionActive}\r\n        accountDetail={longAccountDetail}\r\n        closeHandler={longCloseHandler}\r\n        isLong={true}\r\n      />\r\n      <PositionInfoViewer\r\n        positionActive={shortAccountDetail.positionActive}\r\n        accountDetail={shortAccountDetail}\r\n        closeHandler={shortCloseHandler}\r\n        isLong={false}\r\n      />\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default memo(PositionInfo);\r\n","import { Text, View } from \"react-native\";\r\nimport rootStyles from \"../../../styles/rootStyles\";\r\n\r\nfunction Shop() {\r\n  return (\r\n    <View style={rootStyles.shop}>\r\n      <Text>Shop</Text>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default Shop;\r\n","import { memo } from \"react\";\r\nimport {\r\n  GestureResponderEvent,\r\n  StyleSheet,\r\n  Text,\r\n  TouchableOpacity,\r\n  View,\r\n} from \"react-native\";\r\n\r\nconst switchStyle = (\r\n  disabled?: boolean,\r\n  selectedValue?: number | boolean,\r\n  thisValue?: number | boolean\r\n) =>\r\n  StyleSheet.create({\r\n    container: {\r\n      backgroundColor: \"whitesmoke\",\r\n      width: \"80%\",\r\n      flexDirection: \"row\",\r\n      opacity: disabled ? 0.5 : 1,\r\n    },\r\n    box: {\r\n      flex: 1,\r\n      padding: 5,\r\n      backgroundColor: selectedValue === thisValue ? \"red\" : \"skyblue\",\r\n    },\r\n  });\r\n\r\nexport interface CustomToggleSwitchProps {\r\n  options: { label: string; value: number | boolean }[];\r\n  value: number | boolean;\r\n  setValueFunction: React.Dispatch<React.SetStateAction<number | boolean>>;\r\n  disabled?: boolean;\r\n}\r\n\r\nfunction CustomToggleSwitch({\r\n  options,\r\n  value,\r\n  setValueFunction,\r\n  disabled,\r\n}: CustomToggleSwitchProps) {\r\n  const onPressHandler = (\r\n    evt: GestureResponderEvent,\r\n    newValue: number | boolean\r\n  ) => {\r\n    setValueFunction(newValue);\r\n  };\r\n  return (\r\n    <View style={switchStyle(disabled).container}>\r\n      {options.map((ele, index) => (\r\n        <TouchableOpacity\r\n          key={index}\r\n          onPress={(evt) => onPressHandler(evt, ele.value)}\r\n          style={switchStyle(disabled, value, ele.value).box}\r\n          disabled={disabled}\r\n        >\r\n          <Text>{ele.label}</Text>\r\n        </TouchableOpacity>\r\n      ))}\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default memo(CustomToggleSwitch);\r\n","import Slider from \"@react-native-community/slider\";\r\nimport { memo } from \"react\";\r\nimport { Text, View } from \"react-native\";\r\n\r\ninterface AmountSettingBoxProps {\r\n  amountRate: number;\r\n  setAmountRate: (value: number) => void;\r\n}\r\n\r\nfunction AmountSettingBox({\r\n  amountRate,\r\n  setAmountRate,\r\n}: AmountSettingBoxProps) {\r\n  const amountRateHandler = (value: number) => {\r\n    setAmountRate(value);\r\n  };\r\n  return (\r\n    <View>\r\n      <Text>보유 현금 대비 </Text>\r\n      <Text>{amountRate}%</Text>\r\n      <Slider\r\n        minimumValue={0}\r\n        maximumValue={100}\r\n        step={5}\r\n        minimumTrackTintColor=\"#FFFFFF\"\r\n        maximumTrackTintColor=\"#000000\"\r\n        value={amountRate}\r\n        onValueChange={amountRateHandler}\r\n        tapToSeek={true}\r\n      />\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default memo(AmountSettingBox);\r\n","import { memo } from \"react\";\r\nimport { Text, View } from \"react-native\";\r\nimport { LEVERAGE_UNITS } from \"../../../../../globalConstant\";\r\nimport CustomToggleSwitch from \"../../../../assets/CustomSwitch\";\r\ninterface LeverageControlBoxProps {\r\n  activeLeverage: number;\r\n  leverage: number;\r\n  setLeverage: React.Dispatch<React.SetStateAction<number>>;\r\n  disabled: boolean;\r\n}\r\n\r\nfunction LeverageControlBox({\r\n  activeLeverage,\r\n  leverage,\r\n  setLeverage,\r\n  disabled,\r\n}: LeverageControlBoxProps) {\r\n  return (\r\n    <View>\r\n      <Text>레버리지</Text>\r\n      <CustomToggleSwitch\r\n        options={LEVERAGE_UNITS}\r\n        value={activeLeverage ? activeLeverage : leverage}\r\n        setValueFunction={setLeverage}\r\n        disabled={disabled}\r\n      />\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default memo(LeverageControlBox);\r\n","import { memo } from \"react\";\r\nimport { Text, View } from \"react-native\";\r\nimport convertKrNumberType from \"../../../../../functions/convertKrNumberType\";\r\n\r\ninterface LiquidPriceBoxProps {\r\n  isLongSelected: boolean;\r\n  longLiquid: number;\r\n  shortLiquid: number;\r\n}\r\n\r\nfunction LiquidPriceBox({\r\n  isLongSelected,\r\n  longLiquid,\r\n  shortLiquid,\r\n}: LiquidPriceBoxProps) {\r\n  return (\r\n    <View>\r\n      <Text>\r\n        청산가 :{\" \"}\r\n        {isLongSelected\r\n          ? convertKrNumberType(Math.ceil(longLiquid))\r\n          : convertKrNumberType(Math.ceil(shortLiquid))}\r\n      </Text>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default memo(LiquidPriceBox);\r\n","import { memo } from \"react\";\r\nimport { Text, View } from \"react-native\";\r\nimport convertKrNumberType from \"../../../../../functions/convertKrNumberType\";\r\n\r\ninterface TotalPriceBoxProps {\r\n  totalPrice: number;\r\n  coinAmount: number;\r\n}\r\n\r\nfunction TotalPriceBox({ totalPrice, coinAmount }: TotalPriceBoxProps) {\r\n  return (\r\n    <View>\r\n      <Text>\r\n        주문총액 : {convertKrNumberType(Math.ceil(totalPrice))}원 | 개수 :{\" \"}\r\n        {coinAmount}\r\n      </Text>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default memo(TotalPriceBox);\r\n","import { memo } from \"react\";\r\nimport { Text, TouchableOpacity } from \"react-native\";\r\n\r\ninterface TradeButtonProps {\r\n  isCandleMoving: boolean;\r\n  buttonHandler: () => void;\r\n  isBuy: boolean;\r\n}\r\n\r\nfunction TradeButton({\r\n  isCandleMoving,\r\n  buttonHandler,\r\n  isBuy,\r\n}: TradeButtonProps) {\r\n  return (\r\n    <TouchableOpacity\r\n      style={{\r\n        backgroundColor: \"green\",\r\n        height: \"100%\",\r\n        opacity: isCandleMoving ? 0.5 : 1,\r\n      }}\r\n      onPress={buttonHandler}\r\n      disabled={isCandleMoving}\r\n    >\r\n      <Text>{isBuy ? \"BUY\" : \"Sell\"}</Text>\r\n    </TouchableOpacity>\r\n  );\r\n}\r\n\r\nexport default memo(TradeButton);\r\n","import { cloneDeep } from \"lodash\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport { View } from \"react-native\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport {\r\n  cashAccountState,\r\n  isCandleMovingState,\r\n  isLongControllerActiveState,\r\n  lastClosePriceState,\r\n  longAccountDetailState,\r\n  longAccountState,\r\n  longLiquidState,\r\n  shortAccountDetailState,\r\n  shortAccountState,\r\n  shortLiquidState,\r\n} from \"../../../../atom\";\r\nimport { TRANSACTION_FEE_RATE } from \"../../../../globalConstant\";\r\nimport AmountSettingBox from \"./components/AmountSettingBox\";\r\n\r\nimport LeverageControlBox from \"./components/LeverageControlBox\";\r\nimport LiquidPriceBox from \"./components/LiquidPriceBox\";\r\nimport TotalPriceBox from \"./components/TotalPriceBox\";\r\nimport TradeButton from \"./components/TradeButton\";\r\n\r\nfunction TradeController({\r\n  disabled,\r\n  activeLeverage,\r\n}: {\r\n  disabled: boolean;\r\n  activeLeverage?: number;\r\n}) {\r\n  // Account System\r\n  const [cashAccount, setCashAccount] = useRecoilState(cashAccountState);\r\n  const [longLiquid, setLongLiquid] = useRecoilState(longLiquidState);\r\n  const [shortLiquid, setShortLiquid] = useRecoilState(shortLiquidState);\r\n  const lastClosePrice = useRecoilValue(lastClosePriceState);\r\n  const [longAccount, setLongAccount] = useRecoilState(longAccountState);\r\n  const [shortAccount, setShortAccount] = useRecoilState(shortAccountState);\r\n  const longAccountDetail = useRecoilValue(longAccountDetailState);\r\n  const shortAccountDetail = useRecoilValue(shortAccountDetailState);\r\n  // UI System\r\n  const isCandleMoving = useRecoilValue(isCandleMovingState);\r\n  const isLongSelected = useRecoilValue(isLongControllerActiveState);\r\n\r\n  const [leverage, setLeverage] = useState(1);\r\n  const [amountRate, setAmountRate] = useState(0);\r\n  const [totalPrice, setTotalPrice] = useState(0);\r\n  const [coinAmount, setCoinAmount] = useState(0);\r\n\r\n  const buyButtonHandler = useCallback(() => {\r\n    if (isLongSelected) {\r\n      if (!isCandleMoving) {\r\n        setCashAccount((prev) => prev - totalPrice);\r\n        if (!longAccountDetail.positionActive && coinAmount > 0) {\r\n          const newLongAccount = {\r\n            positionActive: true,\r\n            openPrice: lastClosePrice,\r\n            liquidPrice: longLiquid,\r\n            leverage: leverage,\r\n            openPositionValue: lastClosePrice * coinAmount,\r\n            openPositionAmount: coinAmount,\r\n            currentPositionValue: lastClosePrice * coinAmount,\r\n          };\r\n          setLongAccount(newLongAccount);\r\n        } else if (longAccountDetail.positionActive && coinAmount > 0) {\r\n          setLongAccount((prev) => {\r\n            const newLog = cloneDeep(prev);\r\n            const newOpenPositionValue = lastClosePrice * coinAmount;\r\n            newLog.openPrice =\r\n              (newLog.openPrice * newLog.openPositionAmount +\r\n                newOpenPositionValue) /\r\n              (newLog.openPositionAmount + coinAmount);\r\n\r\n            newLog.openPositionAmount = newLog.openPositionAmount + coinAmount;\r\n\r\n            newLog.openPositionValue =\r\n              newLog.openPositionValue + newOpenPositionValue;\r\n\r\n            newLog.currentPositionValue =\r\n              newLog.currentPositionValue + newOpenPositionValue;\r\n\r\n            newLog.liquidPrice = newLog.openPrice * (1 - 1 / newLog.leverage);\r\n            return newLog;\r\n          });\r\n        } else if (coinAmount === 0) {\r\n          alert(\"0개는 주문할 수 없습니다.\");\r\n        }\r\n        setAmountRate(0);\r\n      }\r\n    }\r\n  }, [\r\n    isLongSelected,\r\n    isCandleMoving,\r\n    longAccountDetail,\r\n    totalPrice,\r\n    coinAmount,\r\n  ]);\r\n\r\n  const sellButtonHandler = useCallback(() => {\r\n    if (!isLongSelected) {\r\n      if (!isCandleMoving) {\r\n        setCashAccount((prev) => prev - totalPrice);\r\n        if (!shortAccountDetail.positionActive && coinAmount > 0) {\r\n          const newShortAccount = {\r\n            positionActive: true,\r\n            openPrice: lastClosePrice,\r\n            liquidPrice: shortLiquid,\r\n            leverage: leverage,\r\n            openPositionValue: lastClosePrice * coinAmount,\r\n            openPositionAmount: coinAmount,\r\n            currentPositionValue: lastClosePrice * coinAmount,\r\n          };\r\n          setShortAccount(newShortAccount);\r\n        } else if (shortAccountDetail.positionActive && coinAmount > 0) {\r\n          setShortAccount((prev) => {\r\n            const newLog = cloneDeep(prev);\r\n            const newOpenPositionValue = lastClosePrice * coinAmount;\r\n            newLog.openPrice =\r\n              (newLog.openPrice * newLog.openPositionAmount +\r\n                newOpenPositionValue) /\r\n              (newLog.openPositionAmount + coinAmount);\r\n\r\n            newLog.openPositionAmount = newLog.openPositionAmount + coinAmount;\r\n\r\n            newLog.openPositionValue =\r\n              newLog.openPositionValue + newOpenPositionValue;\r\n\r\n            newLog.currentPositionValue =\r\n              newLog.currentPositionValue + newOpenPositionValue;\r\n\r\n            newLog.liquidPrice = newLog.openPrice * (1 + 1 / newLog.leverage);\r\n            return newLog;\r\n          });\r\n        } else if (coinAmount === 0) {\r\n          alert(\"0개는 주문할 수 없습니다.\");\r\n        }\r\n        setAmountRate(0);\r\n      }\r\n    }\r\n  }, [\r\n    isLongSelected,\r\n    isCandleMoving,\r\n    shortAccountDetail,\r\n    totalPrice,\r\n    coinAmount,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    const targetCash = (cashAccount * amountRate) / 100;\r\n    const ableCoinAmount = Math.floor(\r\n      targetCash /\r\n        (lastClosePrice * (1 + (TRANSACTION_FEE_RATE / 100) * leverage))\r\n    );\r\n    setCoinAmount(ableCoinAmount);\r\n  }, [amountRate, leverage]);\r\n\r\n  useEffect(() => {\r\n    setTotalPrice(\r\n      lastClosePrice *\r\n        coinAmount *\r\n        (1 + (TRANSACTION_FEE_RATE / 100) * leverage)\r\n    );\r\n  }, [lastClosePrice, coinAmount]);\r\n\r\n  useEffect(() => {\r\n    if (isCandleMoving) {\r\n      setLongLiquid(0);\r\n      setShortLiquid(0);\r\n    } else {\r\n      if (isLongSelected) {\r\n        setLongLiquid(lastClosePrice * (1 - 1 / leverage));\r\n      } else {\r\n        setShortLiquid(lastClosePrice * (1 + 1 / leverage));\r\n      }\r\n    }\r\n  }, [lastClosePrice, leverage, isCandleMoving, isLongSelected]);\r\n\r\n  useEffect(() => {\r\n    if (isCandleMoving) {\r\n      setAmountRate(0);\r\n    }\r\n  }, [isCandleMoving]);\r\n\r\n  return (\r\n    <View>\r\n      <LeverageControlBox\r\n        activeLeverage={activeLeverage}\r\n        leverage={leverage}\r\n        setLeverage={setLeverage}\r\n        disabled={disabled}\r\n      />\r\n      <AmountSettingBox amountRate={amountRate} setAmountRate={setAmountRate} />\r\n      <TotalPriceBox totalPrice={totalPrice} coinAmount={coinAmount} />\r\n      <LiquidPriceBox\r\n        isLongSelected={isLongSelected}\r\n        longLiquid={longLiquid}\r\n        shortLiquid={shortLiquid}\r\n      />\r\n      {isLongSelected ? (\r\n        <TradeButton\r\n          isCandleMoving={isCandleMoving}\r\n          buttonHandler={buyButtonHandler}\r\n          isBuy={true}\r\n        />\r\n      ) : (\r\n        <TradeButton\r\n          isCandleMoving={isCandleMoving}\r\n          buttonHandler={sellButtonHandler}\r\n          isBuy={false}\r\n        />\r\n      )}\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default TradeController;\r\n","import { useRecoilValue } from \"recoil\";\r\nimport { longAccountDetailState } from \"../../../../atom\";\r\nimport TradeController from \"./TradeController\";\r\n\r\nfunction LongTradeController() {\r\n  const longAccountDetail = useRecoilValue(longAccountDetailState);\r\n\r\n  return (\r\n    <TradeController\r\n      disabled={longAccountDetail.positionActive}\r\n      activeLeverage={\r\n        longAccountDetail.positionActive ? longAccountDetail.leverage : null\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nexport default LongTradeController;\r\n","import { useRecoilValue } from \"recoil\";\r\nimport { shortAccountDetailState } from \"../../../../atom\";\r\nimport TradeController from \"./TradeController\";\r\n\r\nfunction ShortTradeController() {\r\n  const shortAccountDetail = useRecoilValue(shortAccountDetailState);\r\n  return (\r\n    <TradeController\r\n      disabled={shortAccountDetail.positionActive}\r\n      activeLeverage={\r\n        shortAccountDetail.positionActive ? shortAccountDetail.leverage : null\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nexport default ShortTradeController;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Text, View } from \"react-native\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { isLongControllerActiveState } from \"../../../atom\";\r\nimport rootStyles from \"../../../styles/rootStyles\";\r\nimport CustomToggleSwitch from \"../../assets/CustomSwitch\";\r\nimport LongTradeController from \"./trade-controller/LongTradeController\";\r\nimport ShortTradeController from \"./trade-controller/ShortTradeController\";\r\n\r\nfunction Trade() {\r\n  const [isLongSelected, setIsLongSelected] = useRecoilState(\r\n    isLongControllerActiveState\r\n  );\r\n  return (\r\n    <View style={rootStyles.trade}>\r\n      <CustomToggleSwitch\r\n        options={[\r\n          { label: \"Long\", value: true },\r\n          { label: \"Short\", value: false },\r\n        ]}\r\n        value={isLongSelected}\r\n        setValueFunction={setIsLongSelected}\r\n      />\r\n      {isLongSelected ? <LongTradeController /> : <ShortTradeController />}\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default Trade;\r\n","import { ScrollView, View } from \"react-native\";\r\n\r\nimport rootStyles from \"../../styles/rootStyles\";\r\nimport Shop from \"./shop/Shop\";\r\nimport Trade from \"./trade/Trade\";\r\n\r\nfunction ControlPanel() {\r\n  return (\r\n    <View style={rootStyles.controlPanel}>\r\n      <ScrollView\r\n        pagingEnabled\r\n        horizontal\r\n        showsHorizontalScrollIndicator={false}\r\n      >\r\n        <Trade />\r\n        <Shop />\r\n      </ScrollView>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default ControlPanel;\r\n","import { Text, TouchableOpacity, View } from \"react-native\";\r\nimport { useRecoilState, useResetRecoilState } from \"recoil\";\r\nimport {\r\n  cashAccountState,\r\n  isCandleMovingState,\r\n  longAccountState,\r\n  shortAccountState,\r\n  turnNumberState,\r\n} from \"../../atom\";\r\nimport rootStyles from \"../../styles/rootStyles\";\r\n\r\nfunction RootControlButton() {\r\n  const [turnNumber, setTurnNumber] = useRecoilState(turnNumberState);\r\n  const resetCashAccount = useResetRecoilState(cashAccountState);\r\n  const resetLongAccount = useResetRecoilState(longAccountState);\r\n  const resetShortAccount = useResetRecoilState(shortAccountState);\r\n  const [isCandleMoving, setIsCandleMoving] =\r\n    useRecoilState(isCandleMovingState);\r\n  const nextTurnHandler = () => {\r\n    setIsCandleMoving(true);\r\n    setTurnNumber((prev) => prev + 1);\r\n  };\r\n  const resetButtonHandler = () => {\r\n    resetCashAccount();\r\n    resetLongAccount();\r\n    resetShortAccount();\r\n  };\r\n\r\n  return (\r\n    <View style={rootStyles.rootControlButton}>\r\n      <TouchableOpacity\r\n        onPress={resetButtonHandler}\r\n        style={\r\n          isCandleMoving\r\n            ? {\r\n                flex: 1,\r\n                backgroundColor: \"red\",\r\n                height: \"100%\",\r\n                opacity: 0.6,\r\n              }\r\n            : { flex: 1, backgroundColor: \"red\", height: \"100%\" }\r\n        }\r\n        disabled={isCandleMoving}\r\n      >\r\n        <Text>계좌 초기화</Text>\r\n      </TouchableOpacity>\r\n      <TouchableOpacity\r\n        onPress={nextTurnHandler}\r\n        style={\r\n          isCandleMoving\r\n            ? {\r\n                flex: 2,\r\n                backgroundColor: \"skyblue\",\r\n                height: \"100%\",\r\n                opacity: 0.6,\r\n              }\r\n            : { flex: 2, backgroundColor: \"skyblue\", height: \"100%\" }\r\n        }\r\n        disabled={isCandleMoving}\r\n      >\r\n        <Text>Next Turn</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default RootControlButton;\r\n","import { View } from \"react-native\";\r\nimport rootStyles from \"../styles/rootStyles\";\r\nimport MiddleAccount from \"./account/MiddleAccount\";\r\nimport TopAccount from \"./account/TopAccount\";\r\nimport Chart from \"./chart/Chart\";\r\nimport PositionInfo from \"./position-info/PositionInfo\";\r\nimport ControlPanel from \"./control-panel/ControlPanel\";\r\nimport RootControlButton from \"./root-control-button/RootControlButton\";\r\n\r\nfunction Display() {\r\n  return (\r\n    <>\r\n      <View style={rootStyles.display}>\r\n        <TopAccount />\r\n        <Chart />\r\n        <MiddleAccount />\r\n        <PositionInfo />\r\n        <ControlPanel />\r\n        <RootControlButton />\r\n      </View>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Display;\r\n","import { RecoilRoot } from \"recoil\";\nimport Display from \"./components/Display\";\n\nexport default function App() {\n  return (\n    <RecoilRoot>\n      <Display />\n    </RecoilRoot>\n  );\n}\n"],"sourceRoot":""}