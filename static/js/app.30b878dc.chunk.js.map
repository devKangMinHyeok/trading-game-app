{"version":3,"sources":["styles/theme.ts","styles/rootStyles.ts","globalConstant.ts","atom.ts","functions/convertKrNumberType.ts","styles/TextStyledComponents.tsx","components/account/MiddleAccount.tsx","components/account/TopAccount.tsx","functions/calDate.ts","functions/candleGenerator.ts","styles/chartStyles.ts","components/chart/CandleChart.tsx","components/chart/Chart.tsx","hooks/useComponentSize.ts","components/assets/CustomVictoryStack.tsx","components/position-info/EmptyPositionBox.tsx","styles/buttonStyles.tsx","components/position-info/position-box/components/CloseButton.tsx","components/position-info/position-box/components/CurrentPositionInfo.tsx","components/position-info/position-box/components/LeverageInfoBox.tsx","components/position-info/position-box/components/OpenPositionInfo.tsx","components/position-info/position-box/components/ProfitInfoBox.tsx","components/position-info/position-box/components/TitleBox.tsx","components/position-info/position-box/PositionBox.tsx","components/position-info/PositionInfoViewer.tsx","components/position-info/PositionInfo.tsx","components/control-panel/shop/Shop.tsx","components/assets/CustomSwitch.tsx","components/control-panel/trade/trade-controller/components/AmountSettingBox.tsx","components/control-panel/trade/trade-controller/components/LeverageControlBox.tsx","components/control-panel/trade/trade-controller/components/LiquidPriceBox.tsx","components/control-panel/trade/trade-controller/components/TotalPriceBox.tsx","components/control-panel/trade/trade-controller/components/TradeButton.tsx","components/control-panel/trade/trade-controller/TradeController.tsx","components/control-panel/trade/trade-controller/LongTradeController.tsx","components/control-panel/trade/trade-controller/ShortTradeController.tsx","components/control-panel/trade/Trade.tsx","components/control-panel/ControlPanel.tsx","components/root-control-button/RootControlButton.tsx","components/Display.tsx","App.tsx"],"names":["theme","colors","backgroundColor1","backgroundColor2","backgroundColor3","baseTextColor","toneDownTextColor","positiveTextColor","negativeTextColor","longButtonColor","longCandleColor","positivePriceColor","shortButtonColor","shortCandleColor","negativePriceColor","longLiquidActiveLineColor","longLiquidInactiveLineColor","shortLiquidActiveLineColor","shortLiquidInactiveLineColor","openPriceLineColor","CloseButtonBackgroundColor","nextTurnButtonBackgroundColor","resetButtonBackgroundColor","font","bigValueFontSize","midiumValueFontSize","smallValueFontSize","bigRateFontSize","bigTextFontSize","midiumTextFontSize","smallTextFontSize","boldFontWeight","regularFontWeight","lightFontWeight","SCREEN_WIDTH","Dimensions","get","width","rootStyles","StyleSheet","create","display","flex","backgroundColor","topAccount","flexDirection","gap","justifyContent","alignItems","chart","overflow","middleAccount","positionInfo","controlPanel","trade","shop","rootControlButton","CANDLE_INITIAL_DATE","Date","LEVERAGE_UNITS","label","value","INITIAL_CANDLE_SET","x","open","close","high","low","candleDataState","atom","key","default","turnNumberState","isLongControllerActiveState","isCandleMovingState","lastClosePriceState","lastOpenPriceState","longLiquidState","shortLiquidState","cashAccountState","longAccountState","positionActive","openPrice","liquidPrice","leverage","openPositionAmount","openPositionValue","currentPositionValue","shortAccountState","longAccountDetailState","selector","longAccount","unrealizedPnl","profitRate","totalAsset","isPositive","shortAccountDetailState","shortAccount","totalFutureAccountState","longAccountDetail","shortAccountDetail","totalAccountState","cashAccount","futureAccount","openValuation","realizedPnl","cash","futureValuation","convertKrNumberType","number","toString","replace","BaseTextContainer","styled","Text","props","TopAccountText","TopAccountValue","TopAccountRate","MiddleAccountText","MiddleAccountValue","PositionTitleBoxText","isLong","PositionLeverageBoxText","PositionInfoTitleBoxText","PositionInfoValueBoxText","LiquidValueText","OpenValueText","UnrealizedPnlBoxText","UnrealizedPnlBoxValue","PositionCloseButtonText","EmptyPositionText","ControlSectionTitleText","ControlSectionValueText","LiquidControlSectionValueText","OpenButtonText","ResetButtonText","NextTurnButtonText","memo","totalAccount","useRecoilValue","View","style","padding","Math","ceil","toFixed","calDate","date","resDate","setDate","getDate","candleGenerator","time","lastClosePrice","numberPerUnit","random_gap","previousCandle","candleSet","i","newCandle","cloneDeep","newClose","random","newHigh","newLow","push","sharedLabelStyle","fontSize","fill","CandleChart","turnNumber","useRecoilState","candleData","setCandleData","setIsCandleMoving","setLastClosePrice","lastOpenPrice","setLastOpenPrice","setLongAccount","setShortAccount","resetLongAccount","useResetRecoilState","resetShortAccount","longLiquid","shortLiquid","useState","chartXDomain","setChartXDomain","INITIAL_CANDLE_LOW","LAST_OF_INITIAL_CANDLE_HIGH","chartYDomain","setChartYDomain","updateCandleData","useCallback","index","lastIndex","setTimeout","prev","newData","slice","length","shift","newLog","useEffect","timers","lastDate","nextDate","lastPrice","newCandleSet","forEach","ele","clearTimeout","targetCandles","startDate","lowestPrice","highestPrice","domainPadding","containerComponent","cursorLabel","datum","round","y","parent","background","dependentAxis","offsetX","orientation","grid","stroke","strokeWidth","tickLabels","candleWidth","data","d","candleColors","positive","negative","domain","text","textAnchor","strokeDasharray","Chart","useComponentSize","height","size","setSize","onLayout","event","nativeEvent","layout","parentSize","barCashRate","barFutureRate","position","barColor","setBarColor","animate","duration","colorScale","labels","labelComponent","dx","dy","barWidth","paddingTop","BaseButton","TouchableOpacity","CloseButtonContainer","OpenButtonContainer","AccountResetButtonContainer","NextTurnButtonContainer","closeHandler","onPress","PositionSettingInfo","Number","currentfutureTotalAsset","marginTop","marginBottom","borderRadius","PositionBox","accountDetail","paddingRight","isCandleMoving","setCashAccount","totalAcount","setBarCashRate","setBarFutureRate","Shop","switchStyle","disabled","selectedValue","selectedColor","nonSelectedColor","thisValue","container","opacity","box","borderWidth","borderStyle","borderColor","textStyle","color","options","setValueFunction","map","evt","newValue","isLongSelected","amountRate","setAmountRate","MultiSlider","sliderLength","values","onValuesChange","min","max","step","snapped","markerStyle","selectedStyle","trackStyle","activeLeverage","setLeverage","totalPrice","coinAmount","buttonHandler","isBuy","TradeController","setLongLiquid","setShortLiquid","setTotalPrice","setCoinAmount","buyButtonHandler","alert","newOpenPositionValue","sellButtonHandler","targetCash","ableCoinAmount","floor","TRANSACTION_FEE_RATE","LongTradeController","ShortTradeController","Trade","setIsLongSelected","ControlPanel","RootControlButton","setTurnNumber","resetCashAccount","Display","App"],"mappings":"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","file":"static/js/app.30b878dc.chunk.js","sourcesContent":["interface IColors {\r\n  backgroundColor1: string;\r\n  backgroundColor2: string;\r\n  backgroundColor3: string;\r\n\r\n  baseTextColor: string;\r\n  toneDownTextColor: string;\r\n  positiveTextColor: string;\r\n  negativeTextColor: string;\r\n\r\n  longButtonColor: string;\r\n  longCandleColor: string;\r\n  positivePriceColor: string;\r\n\r\n  shortButtonColor: string;\r\n  shortCandleColor: string;\r\n  negativePriceColor: string;\r\n\r\n  longLiquidActiveLineColor: string;\r\n  longLiquidInactiveLineColor: string;\r\n\r\n  shortLiquidActiveLineColor: string;\r\n  shortLiquidInactiveLineColor: string;\r\n\r\n  openPriceLineColor: string;\r\n\r\n  CloseButtonBackgroundColor: string;\r\n\r\n  resetButtonBackgroundColor: string;\r\n  nextTurnButtonBackgroundColor: string;\r\n}\r\n\r\nconst colors: IColors = {\r\n  backgroundColor1: \"#161A1E\",\r\n  backgroundColor2: \"#1e2227ff\",\r\n  backgroundColor3: \"#303030ff\",\r\n\r\n  baseTextColor: \"#FFFFFF\",\r\n  toneDownTextColor: \"#bebebe\",\r\n  positiveTextColor: \"#32D993\",\r\n  negativeTextColor: \"#F6465D\",\r\n\r\n  longButtonColor: \"#32D993\",\r\n  longCandleColor: \"#0ECB81\",\r\n  positivePriceColor: \"#13B074\",\r\n\r\n  shortButtonColor: \"#F6465D\",\r\n  shortCandleColor: \"#F6465D\",\r\n  negativePriceColor: \"#F6465D\",\r\n\r\n  longLiquidActiveLineColor: \"#2be6ff\",\r\n  longLiquidInactiveLineColor: \"#2be6ff8e\",\r\n\r\n  shortLiquidActiveLineColor: \"#ee32ff\",\r\n  shortLiquidInactiveLineColor: \"#ee32ff8c\",\r\n\r\n  openPriceLineColor: \"#ffc56e\",\r\n\r\n  CloseButtonBackgroundColor: \"#ffffff\",\r\n\r\n  nextTurnButtonBackgroundColor: \"#6c17ff\",\r\n  resetButtonBackgroundColor: \"#ff1616\",\r\n};\r\n\r\ninterface IFont {\r\n  bigValueFontSize: string;\r\n  midiumValueFontSize: string;\r\n  smallValueFontSize: string;\r\n\r\n  bigRateFontSize: string;\r\n\r\n  midiumTextFontSize: string;\r\n  bigTextFontSize: string;\r\n  smallTextFontSize: string;\r\n\r\n  boldFontWeight: number;\r\n  regularFontWeight: number;\r\n  lightFontWeight: number;\r\n}\r\n\r\nconst font: IFont = {\r\n  bigValueFontSize: \"16px\",\r\n  midiumValueFontSize: \"14px\",\r\n  smallValueFontSize: \"12px\",\r\n\r\n  bigRateFontSize: \"14px\",\r\n\r\n  bigTextFontSize: \"16px\",\r\n  midiumTextFontSize: \"14px\",\r\n  smallTextFontSize: \"12px\",\r\n\r\n  boldFontWeight: 600,\r\n  regularFontWeight: 500,\r\n  lightFontWeight: 400,\r\n};\r\n\r\nexport interface ITheme {\r\n  colors: IColors;\r\n  font: IFont;\r\n}\r\n\r\nconst theme: ITheme = {\r\n  colors,\r\n  font,\r\n};\r\n\r\nexport default theme;\r\n","import { Dimensions, StyleSheet } from \"react-native\";\r\nimport theme from \"./theme\";\r\n\r\nexport const { width: SCREEN_WIDTH } = Dimensions.get(\"window\");\r\n\r\nconst rootStyles = StyleSheet.create({\r\n  display: {\r\n    flex: 1,\r\n    backgroundColor: \"#fff\",\r\n  },\r\n\r\n  topAccount: {\r\n    flexDirection: \"row\",\r\n    flex: 0.6,\r\n    gap: 5,\r\n    justifyContent: \"center\",\r\n    alignItems: \"flex-end\",\r\n    backgroundColor: theme.colors.backgroundColor1,\r\n  },\r\n\r\n  chart: {\r\n    flex: 1.6,\r\n    justifyContent: \"center\",\r\n    overflow: \"hidden\",\r\n    backgroundColor: theme.colors.backgroundColor1,\r\n  },\r\n\r\n  middleAccount: {\r\n    flex: 0.3,\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-around\",\r\n    alignItems: \"center\",\r\n    backgroundColor: theme.colors.backgroundColor2,\r\n  },\r\n\r\n  positionInfo: {\r\n    flex: 1.2,\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-around\",\r\n    backgroundColor: theme.colors.backgroundColor2,\r\n  },\r\n\r\n  controlPanel: {\r\n    flex: 1.6,\r\n    backgroundColor: \"pink\",\r\n    flexDirection: \"row\",\r\n  },\r\n\r\n  trade: {\r\n    flex: 7.5,\r\n    backgroundColor: \"grey\",\r\n  },\r\n\r\n  shop: {\r\n    flex: 1.5,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    backgroundColor: theme.colors.backgroundColor1,\r\n  },\r\n\r\n  rootControlButton: {\r\n    flex: 1.1,\r\n    backgroundColor: theme.colors.backgroundColor2,\r\n    flexDirection: \"row\",\r\n  },\r\n});\r\n\r\nexport default rootStyles;\r\n","import { ICandleStick } from \"./interfaces/interface\";\r\n\r\n// Chart Style\r\nexport const LABEL_GAP_OF_LINE = 2;\r\nexport const DOMAIN_PADDING = 15;\r\nexport const CANDLE_WIDTH = 8;\r\n\r\nexport const CHART_X_DOMAIN_LENGTH = 25;\r\nexport const CHART_Y_DOMAIN_PADDING = 15;\r\n\r\nexport const TRADE_PRICE_STROKE_WIDTH = 1.5;\r\nexport const TRADE_PRICE_STROKE_DASH_ARRAY = 1;\r\n\r\nexport const LIQUID_PRICE_STROKE_WIDTH = 1.5;\r\n\r\nexport const OPEN_PRICE_STROKE_WIDTH = 1.5;\r\nexport const OPEN_PRICE_STROKE_DASH_ARRAY = 1.5;\r\n\r\nexport const LEFT_LABEL_FONT_SIZE = 9;\r\n\r\n// Chart System\r\nexport const SPLIT_UNIT_OF_CANDLE = 20;\r\nexport const CANDLE_MOVING_UNIT_MS = 200;\r\n\r\nexport const INITIAL_CANDLE_OPEN = 100;\r\nexport const INITIAL_CANDLE_CLOSE = 110;\r\nexport const INITIAL_CANDLE_HIGH = 120;\r\nexport const INITIAL_CANDLE_LOW = 90;\r\n\r\nexport const LAST_OF_INITIAL_CANDLE_OPEN = 180;\r\nexport const LAST_OF_INITIAL_CANDLE_CLOSE = 150;\r\nexport const LAST_OF_INITIAL_CANDLE_HIGH = 180;\r\nexport const LAST_OF_INITIAL_CANDLE_LOW = 140;\r\n\r\nexport const CANDLE_INITIAL_DATE = new Date(2022, 0, 1);\r\n\r\n// Account\r\nexport const INITIAL_CASH = 1000000;\r\nexport const TRANSACTION_FEE_RATE = 0.04;\r\n\r\nexport const POSITIVE = \"positive\";\r\nexport const NEGATIVE = \"negative\";\r\nexport const ZERO = \"zero\";\r\n\r\n// Leverage\r\nexport const INIT_LEVERAGE = 1;\r\nexport const LEVERAGE_MIN = 1;\r\nexport const LEVERAGE_MAX = 50;\r\n\r\nexport const LEVERAGE_UNITS = [\r\n  { label: \"x1\", value: 1 },\r\n  { label: \"x2\", value: 2 },\r\n  { label: \"x3\", value: 3 },\r\n  { label: \"x5\", value: 5 },\r\n  { label: \"x10\", value: 10 },\r\n  { label: \"x25\", value: 25 },\r\n  { label: \"x50\", value: 50 },\r\n];\r\nexport const INITIAL_CANDLE_SET: ICandleStick[] = [\r\n  {\r\n    x: CANDLE_INITIAL_DATE,\r\n    open: INITIAL_CANDLE_OPEN,\r\n    close: INITIAL_CANDLE_CLOSE,\r\n    high: INITIAL_CANDLE_HIGH,\r\n    low: INITIAL_CANDLE_LOW,\r\n  },\r\n  { x: new Date(2022, 0, 2), open: 110, close: 130, high: 130, low: 100 },\r\n  { x: new Date(2022, 0, 3), open: 130, close: 100, high: 140, low: 90 },\r\n  { x: new Date(2022, 0, 4), open: 100, close: 125, high: 150, low: 100 },\r\n  { x: new Date(2022, 0, 5), open: 125, close: 150, high: 170, low: 120 },\r\n  { x: new Date(2022, 0, 6), open: 150, close: 130, high: 160, low: 120 },\r\n  { x: new Date(2022, 0, 7), open: 130, close: 180, high: 200, low: 100 },\r\n  { x: new Date(2022, 0, 8), open: 180, close: 200, high: 200, low: 160 },\r\n  { x: new Date(2022, 0, 9), open: 200, close: 160, high: 210, low: 150 },\r\n  { x: new Date(2022, 0, 10), open: 160, close: 150, high: 200, low: 150 },\r\n  { x: new Date(2022, 0, 11), open: 150, close: 120, high: 160, low: 110 },\r\n  { x: new Date(2022, 0, 12), open: 120, close: 130, high: 140, low: 110 },\r\n  { x: new Date(2022, 0, 13), open: 130, close: 160, high: 180, low: 130 },\r\n  {\r\n    x: new Date(2022, 0, 14),\r\n    open: 160,\r\n    close: LAST_OF_INITIAL_CANDLE_OPEN,\r\n    high: 200,\r\n    low: 150,\r\n  },\r\n  {\r\n    x: new Date(2022, 0, 15),\r\n    open: LAST_OF_INITIAL_CANDLE_OPEN,\r\n    close: LAST_OF_INITIAL_CANDLE_CLOSE,\r\n    high: LAST_OF_INITIAL_CANDLE_HIGH,\r\n    low: LAST_OF_INITIAL_CANDLE_LOW,\r\n  },\r\n];\r\n","import { atom, selector } from \"recoil\";\r\nimport {\r\n  INITIAL_CANDLE_SET,\r\n  INITIAL_CASH,\r\n  LAST_OF_INITIAL_CANDLE_CLOSE,\r\n  LAST_OF_INITIAL_CANDLE_HIGH,\r\n  LAST_OF_INITIAL_CANDLE_LOW,\r\n  LAST_OF_INITIAL_CANDLE_OPEN,\r\n  NEGATIVE,\r\n  POSITIVE,\r\n  ZERO,\r\n} from \"./globalConstant\";\r\nimport {\r\n  IFutureAccount,\r\n  IFutureAccountDetail,\r\n  ITotalAccount,\r\n  ITotalFutureAccount,\r\n} from \"./interfaces/interface\";\r\n\r\n// UI 시스템\r\n\r\n// 게임 시스템\r\nexport const candleDataState = atom({\r\n  key: \"candleDataState\",\r\n  default: INITIAL_CANDLE_SET,\r\n});\r\n\r\nexport const turnNumberState = atom({\r\n  key: \"turnNumberState\",\r\n  default: 1,\r\n});\r\n\r\nexport const isLongControllerActiveState = atom({\r\n  key: \"isLongControllerActiveState\",\r\n  default: true,\r\n});\r\n\r\nexport const isCandleMovingState = atom({\r\n  key: \"isCandleMovingState\",\r\n  default: false,\r\n});\r\n\r\nexport const lastClosePriceState = atom({\r\n  key: \"lastClosePriceState\",\r\n  default: LAST_OF_INITIAL_CANDLE_CLOSE,\r\n});\r\n\r\nexport const lastOpenPriceState = atom({\r\n  key: \"lastOpenPriceState\",\r\n  default: LAST_OF_INITIAL_CANDLE_OPEN,\r\n});\r\n\r\nexport const lastHighPriceState = atom({\r\n  key: \"lastHighPriceState\",\r\n  default: LAST_OF_INITIAL_CANDLE_HIGH,\r\n});\r\n\r\nexport const lastLowPriceState = atom({\r\n  key: \"lastLowPriceState\",\r\n  default: LAST_OF_INITIAL_CANDLE_LOW,\r\n});\r\n\r\nexport const longLiquidState = atom({\r\n  key: \"longLiquidState\",\r\n  default: 0,\r\n});\r\n\r\nexport const shortLiquidState = atom({\r\n  key: \"shortLiquidState\",\r\n  default: 0,\r\n});\r\n\r\n// 게좌 시스템\r\nexport const cashAccountState = atom({\r\n  key: \"accountState\",\r\n  default: 1000000,\r\n});\r\n\r\nexport const longAccountState = atom({\r\n  key: \"longAccountState\",\r\n  default: {\r\n    positionActive: false,\r\n    openPrice: 0,\r\n    liquidPrice: 0,\r\n    leverage: 1,\r\n    openPositionAmount: 0,\r\n    openPositionValue: 0,\r\n    currentPositionValue: 0,\r\n  } as IFutureAccount,\r\n});\r\n\r\nexport const shortAccountState = atom({\r\n  key: \"shortAccountState\",\r\n  default: {\r\n    positionActive: false,\r\n    openPrice: 0,\r\n    liquidPrice: 0,\r\n    leverage: 1,\r\n    openPositionAmount: 0,\r\n    openPositionValue: 0,\r\n    currentPositionValue: 0,\r\n  } as IFutureAccount,\r\n});\r\n\r\nexport const longAccountDetailState = selector({\r\n  key: \"longAccountDetailState\",\r\n  get: ({ get }) => {\r\n    const longAccount = get(longAccountState);\r\n    const unrealizedPnl =\r\n      longAccount.leverage *\r\n      (longAccount.currentPositionValue - longAccount.openPositionValue);\r\n    return {\r\n      positionActive: longAccount.positionActive,\r\n      openPrice: longAccount.openPrice,\r\n      liquidPrice: longAccount.liquidPrice,\r\n      leverage: longAccount.leverage,\r\n      openPositionAmount: longAccount.openPositionAmount,\r\n      openPositionValue: longAccount.openPositionValue,\r\n      currentPositionValue: longAccount.currentPositionValue,\r\n      unrealizedPnl,\r\n      profitRate: unrealizedPnl / longAccount.openPositionValue,\r\n      totalAsset: unrealizedPnl + longAccount.openPositionValue,\r\n      isPositive:\r\n        unrealizedPnl > 0 ? POSITIVE : unrealizedPnl < 0 ? NEGATIVE : ZERO,\r\n    } as IFutureAccountDetail;\r\n  },\r\n});\r\n\r\nexport const shortAccountDetailState = selector({\r\n  key: \"shortAccountDetailState\",\r\n  get: ({ get }) => {\r\n    const shortAccount = get(shortAccountState);\r\n    const unrealizedPnl =\r\n      shortAccount.leverage *\r\n      (shortAccount.openPositionValue - shortAccount.currentPositionValue);\r\n    return {\r\n      positionActive: shortAccount.positionActive,\r\n      openPrice: shortAccount.openPrice,\r\n      liquidPrice: shortAccount.liquidPrice,\r\n      leverage: shortAccount.leverage,\r\n      openPositionAmount: shortAccount.openPositionAmount,\r\n      openPositionValue: shortAccount.openPositionValue,\r\n      currentPositionValue: shortAccount.currentPositionValue,\r\n      unrealizedPnl,\r\n      profitRate: unrealizedPnl / shortAccount.openPositionValue,\r\n      totalAsset: unrealizedPnl + shortAccount.openPositionValue,\r\n      isPositive:\r\n        unrealizedPnl > 0 ? POSITIVE : unrealizedPnl < 0 ? NEGATIVE : ZERO,\r\n    } as IFutureAccountDetail;\r\n  },\r\n});\r\n\r\nexport const totalFutureAccountState = selector({\r\n  key: \"futureAccountState\",\r\n  get: ({ get }) => {\r\n    const longAccountDetail = get(longAccountDetailState);\r\n    const shortAccountDetail = get(shortAccountDetailState);\r\n\r\n    const openPositionValue =\r\n      longAccountDetail.openPositionValue +\r\n      shortAccountDetail.openPositionValue;\r\n    const currentPositionValue =\r\n      longAccountDetail.currentPositionValue +\r\n      shortAccountDetail.currentPositionValue;\r\n    const unrealizedPnl =\r\n      longAccountDetail.unrealizedPnl + shortAccountDetail.unrealizedPnl;\r\n\r\n    return {\r\n      positionActive:\r\n        longAccountDetail.positionActive || shortAccountDetail.positionActive,\r\n      openPositionValue,\r\n      currentPositionValue,\r\n      unrealizedPnl,\r\n      profitRate: unrealizedPnl / openPositionValue,\r\n      totalAsset: unrealizedPnl + openPositionValue,\r\n      isPositive:\r\n        unrealizedPnl > 0 ? POSITIVE : unrealizedPnl < 0 ? NEGATIVE : ZERO,\r\n    } as ITotalFutureAccount;\r\n  },\r\n});\r\n\r\nexport const totalAccountState = selector({\r\n  key: \"totalAccountState\",\r\n  get: ({ get }) => {\r\n    const cashAccount = get(cashAccountState);\r\n    const futureAccount = get(totalFutureAccountState);\r\n\r\n    const openValuation = futureAccount.openPositionValue + cashAccount;\r\n    const totalAsset = cashAccount + futureAccount.totalAsset;\r\n    const unrealizedPnl = totalAsset - openValuation;\r\n    const realizedPnl = totalAsset - INITIAL_CASH;\r\n    return {\r\n      cash: cashAccount,\r\n      futureValuation: futureAccount.totalAsset,\r\n      totalAsset,\r\n      unrealizedPnl,\r\n      profitRate: unrealizedPnl / openValuation,\r\n      isPositive:\r\n        realizedPnl > 0 ? POSITIVE : realizedPnl < 0 ? NEGATIVE : ZERO,\r\n    } as ITotalAccount;\r\n  },\r\n});\r\n","const convertKrNumberType = (number: number) => {\r\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n};\r\n\r\nexport default convertKrNumberType;\r\n","import styled from \"styled-components/native\";\r\nimport { NEGATIVE, POSITIVE } from \"../globalConstant\";\r\nimport { ITheme } from \"./theme\";\r\n\r\ninterface IContainerProps {\r\n  theme?: ITheme;\r\n}\r\n\r\ninterface ITextContainerProps extends IContainerProps {\r\n  isPositive: string;\r\n}\r\n\r\ninterface IInfoContainerProps extends IContainerProps {\r\n  isLong: boolean;\r\n}\r\n\r\ninterface ICloseButtonContainerProps extends IContainerProps {\r\n  isLong: boolean;\r\n}\r\n\r\nexport const BaseTextContainer = styled.Text`\r\n  color: ${(props: IContainerProps) => props.theme.colors.baseTextColor};\r\n`;\r\n\r\n// Top Account\r\nexport const TopAccountText = styled(BaseTextContainer)`\r\n  font-size: ${(props: IContainerProps) => props.theme.font.midiumTextFontSize};\r\n`;\r\n\r\nexport const TopAccountValue = styled(BaseTextContainer)`\r\n  font-size: ${(props: ITextContainerProps) =>\r\n    props.theme.font.bigValueFontSize};\r\n  color: ${(props: ITextContainerProps) =>\r\n    props.isPositive == POSITIVE\r\n      ? props.theme.colors.positiveTextColor\r\n      : props.isPositive == NEGATIVE\r\n      ? props.theme.colors.negativeTextColor\r\n      : props.theme.colors.baseTextColor};\r\n`;\r\n\r\nexport const TopAccountRate = styled(BaseTextContainer)`\r\n  font-size: ${(props: ITextContainerProps) =>\r\n    props.theme.font.bigRateFontSize};\r\n  color: ${(props: ITextContainerProps) =>\r\n    props.isPositive == POSITIVE\r\n      ? props.theme.colors.positiveTextColor\r\n      : props.isPositive == NEGATIVE\r\n      ? props.theme.colors.negativeTextColor\r\n      : props.theme.colors.baseTextColor};\r\n`;\r\n\r\n// Middle Account\r\nexport const MiddleAccountText = styled(BaseTextContainer)`\r\n  color: ${(props: IContainerProps) => props.theme.colors.toneDownTextColor};\r\n  font-size: ${(props: IContainerProps) => props.theme.font.smallTextFontSize};\r\n`;\r\nexport const MiddleAccountValue = styled(BaseTextContainer)`\r\n  color: ${(props: IContainerProps) => props.theme.colors.baseTextColor};\r\n  font-size: ${(props: IContainerProps) => props.theme.font.bigValueFontSize};\r\n`;\r\n\r\n// Position Info\r\nexport const PositionTitleBoxText = styled(BaseTextContainer)`\r\n  background-color: ${(props: IInfoContainerProps) =>\r\n    props.isLong\r\n      ? props.theme.colors.positiveTextColor\r\n      : props.theme.colors.negativeTextColor};\r\n  font-size: ${(props: IInfoContainerProps) =>\r\n    props.theme.font.midiumTextFontSize};\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const PositionLeverageBoxText = styled(BaseTextContainer)`\r\n  color: ${(props: IInfoContainerProps) =>\r\n    props.isLong\r\n      ? props.theme.colors.positiveTextColor\r\n      : props.theme.colors.negativeTextColor};\r\n  font-size: ${(props: IInfoContainerProps) =>\r\n    props.theme.font.bigValueFontSize};\r\n  font-weight: ${(props: IInfoContainerProps) =>\r\n    props.theme.font.boldFontWeight};\r\n  margin-left: 5px;\r\n`;\r\n\r\nexport const PositionInfoTitleBoxText = styled(BaseTextContainer)`\r\n  color: ${(props: IInfoContainerProps) =>\r\n    props.theme.colors.toneDownTextColor};\r\n  font-size: ${(props: IInfoContainerProps) =>\r\n    props.theme.font.smallTextFontSize};\r\n`;\r\n\r\nexport const PositionInfoValueBoxText = styled(BaseTextContainer)`\r\n  font-size: ${(props: IInfoContainerProps) =>\r\n    props.theme.font.midiumValueFontSize};\r\n`;\r\n\r\nexport const LiquidValueText = styled(PositionInfoValueBoxText)`\r\n  color: ${(props: IInfoContainerProps) =>\r\n    props.isLong\r\n      ? props.theme.colors.longLiquidActiveLineColor\r\n      : props.theme.colors.shortLiquidActiveLineColor};\r\n`;\r\n\r\nexport const OpenValueText = styled(PositionInfoValueBoxText)`\r\n  color: ${(props: IContainerProps) => props.theme.colors.openPriceLineColor};\r\n`;\r\n\r\nexport const UnrealizedPnlBoxText = styled(PositionInfoTitleBoxText)``;\r\n\r\nexport const UnrealizedPnlBoxValue = styled(PositionInfoValueBoxText)`\r\n  color: ${(props: ITextContainerProps) =>\r\n    props.isPositive == POSITIVE\r\n      ? props.theme.colors.positiveTextColor\r\n      : props.isPositive == NEGATIVE\r\n      ? props.theme.colors.negativeTextColor\r\n      : props.theme.colors.baseTextColor};\r\n`;\r\n\r\nexport const PositionCloseButtonText = styled(BaseTextContainer)`\r\n  color: ${(props: ICloseButtonContainerProps) =>\r\n    props.isLong\r\n      ? props.theme.colors.positiveTextColor\r\n      : props.theme.colors.negativeTextColor};\r\n  font-weight: ${(props: ICloseButtonContainerProps) =>\r\n    props.theme.font.boldFontWeight};\r\n`;\r\n\r\nexport const EmptyPositionText = styled(BaseTextContainer)`\r\n  font-weight: ${(props: IContainerProps) => props.theme.font.boldFontWeight};\r\n`;\r\n\r\n// Controll Panel\r\nexport const ControlSectionTitleText = styled(BaseTextContainer)`\r\n  font-size: ${(props: IContainerProps) => props.theme.font.smallTextFontSize};\r\n  color: ${(props: IContainerProps) => props.theme.colors.toneDownTextColor};\r\n`;\r\nexport const ControlSectionValueText = styled(BaseTextContainer)`\r\n  font-size: ${(props: IContainerProps) =>\r\n    props.theme.font.midiumValueFontSize};\r\n`;\r\n\r\nexport const LiquidControlSectionValueText = styled(ControlSectionValueText)`\r\n  color: ${(props: IInfoContainerProps) =>\r\n    props.isLong\r\n      ? props.theme.colors.longLiquidActiveLineColor\r\n      : props.theme.colors.shortLiquidActiveLineColor};\r\n`;\r\n\r\nexport const OpenButtonText = styled(BaseTextContainer)`\r\n  /* color: ${(props: ICloseButtonContainerProps) =>\r\n    props.isLong\r\n      ? props.theme.colors.positiveTextColor\r\n      : props.theme.colors.negativeTextColor}; */\r\n  font-weight: ${(props: ICloseButtonContainerProps) =>\r\n    props.theme.font.boldFontWeight};\r\n`;\r\n\r\n// Root Control Button\r\nexport const ResetButtonText = styled(BaseTextContainer)`\r\n  font-size: ${(props: IContainerProps) => props.theme.font.bigTextFontSize};\r\n  font-weight: ${(props: IContainerProps) => props.theme.font.boldFontWeight};\r\n`;\r\nexport const NextTurnButtonText = styled(BaseTextContainer)`\r\n  font-size: ${(props: IContainerProps) => props.theme.font.bigTextFontSize};\r\n  font-weight: ${(props: IContainerProps) => props.theme.font.boldFontWeight};\r\n`;\r\n","import { memo } from \"react\";\r\nimport { Text, View } from \"react-native\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { totalAccountState } from \"../../atom\";\r\nimport convertKrNumberType from \"../../functions/convertKrNumberType\";\r\nimport rootStyles from \"../../styles/rootStyles\";\r\nimport {\r\n  MiddleAccountText,\r\n  MiddleAccountValue,\r\n} from \"../../styles/TextStyledComponents\";\r\n\r\nfunction MiddleAccount() {\r\n  const totalAccount = useRecoilValue(totalAccountState);\r\n  return (\r\n    <View style={rootStyles.middleAccount}>\r\n      <View style={{ flex: 1, padding: 10 }}>\r\n        <MiddleAccountText>선물 </MiddleAccountText>\r\n        <MiddleAccountValue>\r\n          {convertKrNumberType(Math.ceil(totalAccount.futureValuation))}원\r\n        </MiddleAccountValue>\r\n      </View>\r\n      <View style={{ flex: 1, padding: 10 }}>\r\n        <MiddleAccountText>현금 </MiddleAccountText>\r\n        <MiddleAccountValue>\r\n          {convertKrNumberType(Math.ceil(totalAccount.cash))}원\r\n        </MiddleAccountValue>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default memo(MiddleAccount);\r\n","import { memo, useState } from \"react\";\r\nimport { View } from \"react-native\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { totalAccountState } from \"../../atom\";\r\nimport convertKrNumberType from \"../../functions/convertKrNumberType\";\r\nimport { INITIAL_CASH } from \"../../globalConstant\";\r\nimport rootStyles from \"../../styles/rootStyles\";\r\nimport {\r\n  TopAccountRate,\r\n  TopAccountText,\r\n  TopAccountValue,\r\n} from \"../../styles/TextStyledComponents\";\r\n\r\nfunction TopAccount() {\r\n  const totalAccount = useRecoilValue(totalAccountState);\r\n\r\n  return (\r\n    <View style={rootStyles.topAccount}>\r\n      <View style={{ flex: 1, alignItems: \"flex-end\" }}>\r\n        <TopAccountText>총 보유자산 | </TopAccountText>\r\n      </View>\r\n      <View style={{ flex: 2.3, flexDirection: \"row\", alignItems: \"flex-end\" }}>\r\n        <TopAccountValue isPositive={totalAccount.isPositive}>\r\n          {convertKrNumberType(Math.ceil(totalAccount.totalAsset))}원{\" \"}\r\n        </TopAccountValue>\r\n        <TopAccountRate isPositive={totalAccount.isPositive}>\r\n          {(\r\n            ((totalAccount.totalAsset - INITIAL_CASH) / INITIAL_CASH) *\r\n            100\r\n          ).toFixed(2)}\r\n          %\r\n        </TopAccountRate>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default memo(TopAccount);\r\n","const calDate = (date: Date, number: number) => {\r\n  const resDate = new Date(date);\r\n  resDate.setDate(resDate.getDate() + number);\r\n\r\n  return resDate;\r\n};\r\n\r\nexport default calDate;\r\n","import { cloneDeep, random } from \"lodash\";\r\nimport { ICandleStick } from \"../interfaces/interface\";\r\n\r\nconst candleGenerator = (\r\n  time: Date,\r\n  lastClosePrice: number,\r\n  numberPerUnit: number,\r\n  random_gap: number = 0.05\r\n) => {\r\n  let previousCandle: ICandleStick = {\r\n    x: time,\r\n    open: lastClosePrice,\r\n    high: lastClosePrice,\r\n    low: lastClosePrice,\r\n    close: lastClosePrice,\r\n  };\r\n  const candleSet = [previousCandle];\r\n\r\n  for (let i = 0; i < numberPerUnit; i++) {\r\n    const newCandle = cloneDeep(previousCandle);\r\n\r\n    const newClose =\r\n      newCandle.close * random(1 - random_gap, 1 + random_gap, true);\r\n    const newHigh = newCandle.high < newClose ? newClose : newCandle.high;\r\n    const newLow = newCandle.low > newClose ? newClose : newCandle.low;\r\n\r\n    newCandle.close = newClose;\r\n    newCandle.high = newHigh;\r\n    newCandle.low = newLow;\r\n\r\n    previousCandle = newCandle;\r\n    candleSet.push(newCandle);\r\n  }\r\n\r\n  return candleSet;\r\n};\r\n\r\nexport default candleGenerator;\r\n","import { LEFT_LABEL_FONT_SIZE } from \"../globalConstant\";\r\nimport theme from \"./theme\";\r\n\r\nexport const sharedLabelStyle = {\r\n  fontSize: LEFT_LABEL_FONT_SIZE,\r\n  fill: theme.colors.baseTextColor,\r\n};\r\n","import { cloneDeep, round } from \"lodash\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport { Dimensions, View } from \"react-native\";\r\nimport { useRecoilState, useRecoilValue, useResetRecoilState } from \"recoil\";\r\nimport { DomainTuple } from \"victory-core\";\r\nimport {\r\n  VictoryAxis,\r\n  VictoryCandlestick,\r\n  VictoryChart,\r\n  VictoryCursorContainer,\r\n  VictoryLine,\r\n  VictoryLabel,\r\n} from \"victory-native\";\r\nimport {\r\n  candleDataState,\r\n  isCandleMovingState,\r\n  lastClosePriceState,\r\n  lastOpenPriceState,\r\n  longAccountDetailState,\r\n  longAccountState,\r\n  longLiquidState,\r\n  shortAccountDetailState,\r\n  shortAccountState,\r\n  shortLiquidState,\r\n  turnNumberState,\r\n} from \"../../atom\";\r\nimport calDate from \"../../functions/calDate\";\r\nimport candleGenerator from \"../../functions/candleGenerator\";\r\nimport {\r\n  CANDLE_MOVING_UNIT_MS,\r\n  CANDLE_WIDTH,\r\n  CHART_X_DOMAIN_LENGTH,\r\n  CHART_Y_DOMAIN_PADDING,\r\n  DOMAIN_PADDING,\r\n  INITIAL_CANDLE_LOW,\r\n  LABEL_GAP_OF_LINE,\r\n  LAST_OF_INITIAL_CANDLE_HIGH,\r\n  LEFT_LABEL_FONT_SIZE,\r\n  LIQUID_PRICE_STROKE_WIDTH,\r\n  OPEN_PRICE_STROKE_DASH_ARRAY,\r\n  OPEN_PRICE_STROKE_WIDTH,\r\n  SPLIT_UNIT_OF_CANDLE,\r\n  TRADE_PRICE_STROKE_DASH_ARRAY,\r\n  TRADE_PRICE_STROKE_WIDTH,\r\n} from \"../../globalConstant\";\r\nimport { ICandleStick } from \"../../interfaces/interface\";\r\nimport { sharedLabelStyle } from \"../../styles/chartStyles\";\r\nimport { SCREEN_WIDTH } from \"../../styles/rootStyles\";\r\nimport theme from \"../../styles/theme\";\r\n\r\nfunction CandleChart() {\r\n  // console.log(\"렌더링\");\r\n  const turnNumber = useRecoilValue(turnNumberState);\r\n  const [candleData, setCandleData] = useRecoilState(candleDataState);\r\n  const [isCandleMoving, setIsCandleMoving] =\r\n    useRecoilState(isCandleMovingState);\r\n  const [lastClosePrice, setLastClosePrice] =\r\n    useRecoilState(lastClosePriceState);\r\n  const [lastOpenPrice, setLastOpenPrice] = useRecoilState(lastOpenPriceState);\r\n\r\n  const [longAccount, setLongAccount] = useRecoilState(longAccountState);\r\n  const [shortAccount, setShortAccount] = useRecoilState(shortAccountState);\r\n  const longAccountDetail = useRecoilValue(longAccountDetailState);\r\n  const shortAccountDetail = useRecoilValue(shortAccountDetailState);\r\n  const resetLongAccount = useResetRecoilState(longAccountState);\r\n  const resetShortAccount = useResetRecoilState(shortAccountState);\r\n\r\n  const [longLiquid, setLongLiquid] = useRecoilState(longLiquidState);\r\n  const [shortLiquid, setShortLiquid] = useRecoilState(shortLiquidState);\r\n\r\n  const [chartXDomain, setChartXDomain] = useState<DomainTuple>([\r\n    new Date(2022, 0, 1),\r\n    new Date(2022, 0, 15),\r\n  ]);\r\n  const [chartYDomain, setChartYDomain] = useState<DomainTuple>([\r\n    INITIAL_CANDLE_LOW - CHART_Y_DOMAIN_PADDING,\r\n    LAST_OF_INITIAL_CANDLE_HIGH + CHART_Y_DOMAIN_PADDING,\r\n  ]);\r\n\r\n  const updateCandleData = useCallback(\r\n    (newCandle: ICandleStick, index: number, lastIndex: number) => {\r\n      return setTimeout(() => {\r\n        setCandleData((prev) => {\r\n          const newData = [...prev];\r\n          if (newData.slice(-1)[0].x.toString() == newCandle.x.toString()) {\r\n            newData[newData.length - 1] = newCandle;\r\n          } else {\r\n            newData.push(newCandle);\r\n            if (newData.length > CHART_X_DOMAIN_LENGTH) newData.shift();\r\n          }\r\n          return newData;\r\n        });\r\n\r\n        setLastClosePrice(newCandle.close);\r\n\r\n        if (longAccountDetail.positionActive) {\r\n          setLongAccount((prev) => {\r\n            const newLog = cloneDeep(prev);\r\n            newLog.currentPositionValue =\r\n              newCandle.close * newLog.openPositionAmount;\r\n            return newLog;\r\n          });\r\n          if (longAccountDetail.liquidPrice >= newCandle.low) {\r\n            resetLongAccount();\r\n          }\r\n        }\r\n\r\n        if (shortAccountDetail.positionActive) {\r\n          setShortAccount((prev) => {\r\n            const newLog = cloneDeep(prev);\r\n            newLog.currentPositionValue =\r\n              newCandle.close * newLog.openPositionAmount;\r\n            return newLog;\r\n          });\r\n          if (shortAccountDetail.liquidPrice <= newCandle.high) {\r\n            resetShortAccount();\r\n          }\r\n        }\r\n\r\n        if (index === lastIndex) {\r\n          setIsCandleMoving(false);\r\n        }\r\n      }, CANDLE_MOVING_UNIT_MS * index);\r\n    },\r\n    [longAccountDetail, shortAccountDetail]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (turnNumber > 1) {\r\n      const timers: NodeJS.Timeout[] = [];\r\n      const lastDate = candleData.slice(-1)[0].x;\r\n      const nextDate = calDate(new Date(lastDate), 1);\r\n      const lastPrice = candleData.slice(-1)[0].close;\r\n      const newCandleSet = candleGenerator(\r\n        nextDate,\r\n        lastPrice,\r\n        SPLIT_UNIT_OF_CANDLE\r\n      );\r\n      setLastOpenPrice(newCandleSet[0].open);\r\n      for (let i = 0; i < newCandleSet.length; i++) {\r\n        const newCandle = newCandleSet[i];\r\n        timers.push(updateCandleData(newCandle, i, newCandleSet.length - 1));\r\n      }\r\n\r\n      return () => {\r\n        timers.forEach((ele) => clearTimeout(ele));\r\n      };\r\n    }\r\n  }, [turnNumber]);\r\n\r\n  useEffect(() => {\r\n    const targetCandles = candleData.slice(-CHART_X_DOMAIN_LENGTH);\r\n\r\n    // x domain\r\n    const startDate = targetCandles[0].x;\r\n    const lastDate = new Date(startDate);\r\n    lastDate.setDate(startDate.getDate() + CHART_X_DOMAIN_LENGTH);\r\n    setChartXDomain([startDate, lastDate]);\r\n\r\n    // y domain\r\n    let lowestPrice = 10000000000;\r\n    let highestPrice = 0;\r\n\r\n    targetCandles.forEach((ele) => {\r\n      if (ele.low < lowestPrice) {\r\n        lowestPrice = ele.low;\r\n      }\r\n      if (ele.high > highestPrice) {\r\n        highestPrice = ele.high;\r\n      }\r\n    });\r\n\r\n    setChartYDomain([\r\n      lowestPrice - CHART_Y_DOMAIN_PADDING,\r\n      highestPrice + CHART_Y_DOMAIN_PADDING,\r\n    ]);\r\n  }, [candleData]);\r\n\r\n  return (\r\n    <View>\r\n      <VictoryChart\r\n        width={SCREEN_WIDTH}\r\n        domainPadding={{ x: DOMAIN_PADDING }}\r\n        containerComponent={\r\n          <VictoryCursorContainer\r\n            cursorLabel={({ datum }) =>\r\n              \"     price :   \" + `${round(datum.y, 1)}`\r\n            }\r\n            style={{ fill: \"white\" }}\r\n          />\r\n        }\r\n        style={{\r\n          parent: {\r\n            backgroundColor: \"transparent\",\r\n          },\r\n          background: {\r\n            fill: theme.colors.backgroundColor1,\r\n          },\r\n        }}\r\n      >\r\n        <VictoryAxis\r\n          dependentAxis\r\n          offsetX={50}\r\n          orientation=\"right\"\r\n          style={{\r\n            grid: { stroke: \"#b6b6b6\", strokeWidth: 0.5 },\r\n            tickLabels: {\r\n              fill: theme.colors.baseTextColor,\r\n              fontSize: 14,\r\n            },\r\n          }}\r\n        />\r\n        <VictoryCandlestick\r\n          candleWidth={CANDLE_WIDTH}\r\n          style={{\r\n            data: {\r\n              strokeWidth: 1,\r\n              stroke: (d: any) =>\r\n                d.close < d.open\r\n                  ? theme.colors.longCandleColor\r\n                  : theme.colors.shortCandleColor,\r\n            },\r\n          }}\r\n          candleColors={{\r\n            positive: theme.colors.longCandleColor,\r\n            negative: theme.colors.shortCandleColor,\r\n          }}\r\n          data={candleData}\r\n          domain={{\r\n            x: chartXDomain,\r\n            y: chartYDomain,\r\n          }}\r\n        />\r\n\r\n        {/* 현재가 Line */}\r\n        <VictoryLabel\r\n          text={Math.ceil(lastClosePrice)}\r\n          datum={{\r\n            x: calDate(new Date(chartXDomain[1]), 1),\r\n            y: lastClosePrice + 5,\r\n          }}\r\n          textAnchor=\"end\"\r\n          style={sharedLabelStyle}\r\n        />\r\n        <VictoryLine\r\n          domain={{\r\n            x: chartXDomain,\r\n            y: chartYDomain,\r\n          }}\r\n          y={() => lastClosePrice}\r\n          style={{\r\n            data: {\r\n              stroke: (d: any) =>\r\n                lastClosePrice > lastOpenPrice\r\n                  ? theme.colors.longCandleColor\r\n                  : theme.colors.shortCandleColor,\r\n              strokeWidth: TRADE_PRICE_STROKE_WIDTH,\r\n              strokeDasharray: TRADE_PRICE_STROKE_DASH_ARRAY,\r\n            },\r\n          }}\r\n        />\r\n\r\n        {/* Long 청산가 */}\r\n        {longAccountDetail.positionActive ? (\r\n          <VictoryLabel\r\n            text=\"청산가\"\r\n            datum={{\r\n              x: calDate(new Date(chartXDomain[0]), -LABEL_GAP_OF_LINE),\r\n              y: longAccountDetail.liquidPrice,\r\n            }}\r\n            textAnchor=\"end\"\r\n            style={sharedLabelStyle}\r\n          />\r\n        ) : (\r\n          <VictoryLabel\r\n            text=\"청산가\"\r\n            datum={{\r\n              x: calDate(new Date(chartXDomain[0]), -LABEL_GAP_OF_LINE),\r\n              y: longLiquid,\r\n            }}\r\n            textAnchor=\"end\"\r\n            style={sharedLabelStyle}\r\n          />\r\n        )}\r\n        {longAccountDetail.positionActive ? (\r\n          <VictoryLine\r\n            domain={{\r\n              x: chartXDomain,\r\n              y: chartYDomain,\r\n            }}\r\n            y={() => longAccountDetail.liquidPrice}\r\n            style={{\r\n              data: {\r\n                stroke: theme.colors.longLiquidActiveLineColor,\r\n                strokeWidth: LIQUID_PRICE_STROKE_WIDTH,\r\n              },\r\n            }}\r\n          />\r\n        ) : (\r\n          <VictoryLine\r\n            domain={{\r\n              x: chartXDomain,\r\n              y: chartYDomain,\r\n            }}\r\n            y={() => longLiquid}\r\n            style={{\r\n              data: {\r\n                stroke: theme.colors.longLiquidInactiveLineColor,\r\n                strokeWidth: LIQUID_PRICE_STROKE_WIDTH,\r\n              },\r\n            }}\r\n          />\r\n        )}\r\n\r\n        {/* Short 청산가 */}\r\n        {shortAccountDetail.positionActive ? (\r\n          <VictoryLabel\r\n            text=\"청산가\"\r\n            datum={{\r\n              x: calDate(new Date(chartXDomain[0]), -LABEL_GAP_OF_LINE),\r\n              y: shortAccountDetail.liquidPrice,\r\n            }}\r\n            textAnchor=\"end\"\r\n            style={sharedLabelStyle}\r\n          />\r\n        ) : (\r\n          <VictoryLabel\r\n            text=\"청산가\"\r\n            datum={{\r\n              x: calDate(new Date(chartXDomain[0]), -LABEL_GAP_OF_LINE),\r\n              y: shortLiquid,\r\n            }}\r\n            textAnchor=\"end\"\r\n            style={sharedLabelStyle}\r\n          />\r\n        )}\r\n        {shortAccountDetail.positionActive ? (\r\n          <VictoryLine\r\n            domain={{\r\n              x: chartXDomain,\r\n              y: chartYDomain,\r\n            }}\r\n            y={() => shortAccountDetail.liquidPrice}\r\n            style={{\r\n              data: {\r\n                stroke: theme.colors.shortLiquidActiveLineColor,\r\n                strokeWidth: LIQUID_PRICE_STROKE_WIDTH,\r\n              },\r\n            }}\r\n          />\r\n        ) : (\r\n          <VictoryLine\r\n            domain={{\r\n              x: chartXDomain,\r\n              y: chartYDomain,\r\n            }}\r\n            y={() => shortLiquid}\r\n            style={{\r\n              data: {\r\n                stroke: theme.colors.shortLiquidInactiveLineColor,\r\n                strokeWidth: LIQUID_PRICE_STROKE_WIDTH,\r\n              },\r\n            }}\r\n          />\r\n        )}\r\n\r\n        {/* Long 평단가 */}\r\n        {longAccountDetail.positionActive ? (\r\n          <VictoryLabel\r\n            text=\"평단가\"\r\n            datum={{\r\n              x: calDate(new Date(chartXDomain[0]), -LABEL_GAP_OF_LINE),\r\n              y: longAccountDetail.openPrice,\r\n            }}\r\n            textAnchor=\"end\"\r\n            style={sharedLabelStyle}\r\n          />\r\n        ) : null}\r\n        {longAccountDetail.positionActive ? (\r\n          <VictoryLine\r\n            domain={{\r\n              x: chartXDomain,\r\n              y: chartYDomain,\r\n            }}\r\n            y={() => longAccountDetail.openPrice}\r\n            style={{\r\n              data: {\r\n                stroke: theme.colors.openPriceLineColor,\r\n                strokeWidth: OPEN_PRICE_STROKE_WIDTH,\r\n                strokeDasharray: OPEN_PRICE_STROKE_DASH_ARRAY,\r\n              },\r\n            }}\r\n          />\r\n        ) : null}\r\n\r\n        {/* Short 평단가 */}\r\n        {shortAccountDetail.positionActive ? (\r\n          <VictoryLabel\r\n            text=\"평단가\"\r\n            datum={{\r\n              x: calDate(new Date(chartXDomain[0]), -LABEL_GAP_OF_LINE),\r\n              y: shortAccountDetail.openPrice,\r\n            }}\r\n            textAnchor=\"end\"\r\n            style={sharedLabelStyle}\r\n          />\r\n        ) : null}\r\n        {shortAccountDetail.positionActive ? (\r\n          <VictoryLine\r\n            domain={{\r\n              x: chartXDomain,\r\n              y: chartYDomain,\r\n            }}\r\n            y={() => shortAccountDetail.openPrice}\r\n            style={{\r\n              data: {\r\n                stroke: theme.colors.openPriceLineColor,\r\n                strokeWidth: OPEN_PRICE_STROKE_WIDTH,\r\n                strokeDasharray: OPEN_PRICE_STROKE_DASH_ARRAY,\r\n              },\r\n            }}\r\n          />\r\n        ) : null}\r\n      </VictoryChart>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default CandleChart;\r\n","import { Text, View } from \"react-native\";\r\n\r\nimport rootStyles from \"../../styles/rootStyles\";\r\nimport CandleChart from \"./CandleChart\";\r\n\r\nfunction Chart() {\r\n  return (\r\n    <View style={rootStyles.chart}>\r\n      <CandleChart />\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default Chart;\r\n","import { useCallback, useState } from \"react\";\r\nimport { LayoutChangeEvent } from \"react-native\";\r\n\r\nexport interface ISize {\r\n  width: number;\r\n  height: number;\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nconst useComponentSize = () => {\r\n  const [size, setSize] = useState<ISize>({\r\n    width: 0,\r\n    height: 0,\r\n    x: 0,\r\n    y: 0,\r\n  });\r\n  const onLayout = useCallback((event: LayoutChangeEvent) => {\r\n    const { width, height, x, y } = event.nativeEvent.layout;\r\n    setSize({ width, height, x, y });\r\n  }, []);\r\n\r\n  return { size, onLayout };\r\n};\r\n\r\nexport default useComponentSize;\r\n","import { memo, useEffect, useState } from \"react\";\r\nimport { VictoryBar, VictoryLabel, VictoryStack } from \"victory-native\";\r\nimport theme from \"../../styles/theme\";\r\n\r\nfunction CustomVictoryStack({\r\n  parentSize,\r\n  barCashRate,\r\n  barFutureRate,\r\n  position,\r\n}: {\r\n  parentSize: { width: number; height: number; x: number; y: number };\r\n  barCashRate: number;\r\n  barFutureRate: number;\r\n  position: boolean;\r\n}) {\r\n  const [barColor, setBarColor] = useState(\r\n    position ? theme.colors.positivePriceColor : theme.colors.negativePriceColor\r\n  );\r\n\r\n  useEffect(() => {\r\n    setBarColor(\r\n      position\r\n        ? theme.colors.positivePriceColor\r\n        : theme.colors.negativePriceColor\r\n    );\r\n  }, [position]);\r\n\r\n  return (\r\n    <VictoryStack\r\n      width={parentSize.width || 100}\r\n      height={parentSize.height || 100}\r\n      padding={10}\r\n      animate={{ duration: 300 }}\r\n      colorScale={[barColor, \"whitesmoke\"]}\r\n    >\r\n      <VictoryBar\r\n        data={[{ x: \"a\", y: barFutureRate }]}\r\n        labels={({ datum }) => `${Math.ceil(datum.y * 100)}%`}\r\n        style={{ labels: { fill: \"white\" } }}\r\n        labelComponent={<VictoryLabel dx={25} dy={8} />}\r\n        barWidth={15}\r\n      />\r\n      <VictoryBar data={[{ x: \"a\", y: barCashRate }]} barWidth={15} />\r\n    </VictoryStack>\r\n  );\r\n}\r\n\r\nexport default memo(CustomVictoryStack);\r\n","import { memo } from \"react\";\r\nimport { Text, View } from \"react-native\";\r\nimport { EmptyPositionText } from \"../../styles/TextStyledComponents\";\r\n\r\nfunction EmptyPositionBox() {\r\n  return (\r\n    <View\r\n      style={{ justifyContent: \"center\", alignItems: \"center\", paddingTop: 10 }}\r\n    >\r\n      <EmptyPositionText>포지션이 없습니다.</EmptyPositionText>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default memo(EmptyPositionBox);\r\n","import styled from \"styled-components/native\";\r\nimport { ITheme } from \"./theme\";\r\n\r\ninterface IContainerProps {\r\n  theme?: ITheme;\r\n}\r\n\r\ninterface IOpenContainerProps extends IContainerProps {\r\n  isLong: boolean;\r\n}\r\n\r\nexport const BaseButton = styled.TouchableOpacity`\r\n  background-color: ${(props: IContainerProps) =>\r\n    props.theme.colors.CloseButtonBackgroundColor};\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-radius: 5px;\r\n`;\r\n\r\nexport const CloseButtonContainer = styled(BaseButton)`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nexport const OpenButtonContainer = styled(BaseButton)`\r\n  background-color: ${(props: IOpenContainerProps) =>\r\n    props.isLong\r\n      ? props.theme.colors.longButtonColor\r\n      : props.theme.colors.shortButtonColor};\r\n  width: 80%;\r\n  height: 90%;\r\n`;\r\n\r\nexport const AccountResetButtonContainer = styled(BaseButton)`\r\n  background-color: ${(props: IContainerProps) =>\r\n    props.theme.colors.resetButtonBackgroundColor};\r\n  width: 80%;\r\n  height: 40%;\r\n`;\r\n\r\nexport const NextTurnButtonContainer = styled(BaseButton)`\r\n  background-color: ${(props: IContainerProps) =>\r\n    props.theme.colors.nextTurnButtonBackgroundColor};\r\n  width: 80%;\r\n  height: 40%;\r\n`;\r\n","import { memo } from \"react\";\r\nimport { Text, TouchableOpacity } from \"react-native\";\r\nimport { CloseButtonContainer } from \"../../../../styles/buttonStyles\";\r\nimport { PositionCloseButtonText } from \"../../../../styles/TextStyledComponents\";\r\n\r\ninterface CloseButtonProps {\r\n  isLong: boolean;\r\n  closeHandler: () => void;\r\n}\r\n\r\nfunction CloseButton({ isLong, closeHandler }: CloseButtonProps) {\r\n  return (\r\n    <CloseButtonContainer onPress={closeHandler}>\r\n      <PositionCloseButtonText isLong={isLong}>\r\n        포지션 종료\r\n      </PositionCloseButtonText>\r\n    </CloseButtonContainer>\r\n  );\r\n}\r\n\r\nexport default memo(CloseButton);\r\n","import { View } from \"react-native\";\r\nimport convertKrNumberType from \"../../../../functions/convertKrNumberType\";\r\nimport {\r\n  LiquidValueText,\r\n  OpenValueText,\r\n  PositionInfoTitleBoxText,\r\n  PositionInfoValueBoxText,\r\n} from \"../../../../styles/TextStyledComponents\";\r\n\r\ninterface PositionSettingInfoProps {\r\n  liquidPrice: number;\r\n  openPrice: number;\r\n  isLong: boolean;\r\n}\r\n\r\nfunction PositionSettingInfo({\r\n  liquidPrice,\r\n  openPrice,\r\n  isLong,\r\n}: PositionSettingInfoProps) {\r\n  return (\r\n    <View style={{ flexDirection: \"row\" }}>\r\n      <View style={{ flex: 1.3 }}>\r\n        <PositionInfoTitleBoxText>청산가</PositionInfoTitleBoxText>\r\n        <LiquidValueText isLong={isLong}>\r\n          {convertKrNumberType(Number(liquidPrice.toFixed(2)))}\r\n        </LiquidValueText>\r\n      </View>\r\n      <View style={{ flex: 1 }}>\r\n        <PositionInfoTitleBoxText>평단가</PositionInfoTitleBoxText>\r\n        <OpenValueText>\r\n          {convertKrNumberType(Number(openPrice.toFixed(2)))}\r\n        </OpenValueText>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default PositionSettingInfo;\r\n","import { memo } from \"react\";\r\nimport { Text, View } from \"react-native\";\r\nimport { PositionLeverageBoxText } from \"../../../../styles/TextStyledComponents\";\r\n\r\ninterface LeverageInfoBoxProps {\r\n  leverage: number;\r\n  isLong: boolean;\r\n}\r\n\r\nfunction LeverageInfoBox({ leverage, isLong }: LeverageInfoBoxProps) {\r\n  return (\r\n    <View>\r\n      <PositionLeverageBoxText isLong={isLong}>\r\n        X{leverage}\r\n      </PositionLeverageBoxText>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default memo(LeverageInfoBox);\r\n","import { memo } from \"react\";\r\nimport { Text, View } from \"react-native\";\r\nimport convertKrNumberType from \"../../../../functions/convertKrNumberType\";\r\nimport {\r\n  PositionInfoTitleBoxText,\r\n  PositionInfoValueBoxText,\r\n  UnrealizedPnlBoxValue,\r\n} from \"../../../../styles/TextStyledComponents\";\r\n\r\ninterface OpenPositionInfoProps {\r\n  openPositionValue: number;\r\n  currentfutureTotalAsset: number;\r\n  isPositive: string;\r\n}\r\n\r\nfunction OpenPositionInfo({\r\n  openPositionValue,\r\n  currentfutureTotalAsset,\r\n  isPositive,\r\n}: OpenPositionInfoProps) {\r\n  return (\r\n    <View style={{ flexDirection: \"row\" }}>\r\n      <View style={{ flex: 1.3 }}>\r\n        <PositionInfoTitleBoxText>총 매수</PositionInfoTitleBoxText>\r\n        <PositionInfoValueBoxText>\r\n          {convertKrNumberType(Math.ceil(openPositionValue))}\r\n        </PositionInfoValueBoxText>\r\n      </View>\r\n      <View style={{ flex: 1 }}>\r\n        <PositionInfoTitleBoxText>총 평가</PositionInfoTitleBoxText>\r\n        <UnrealizedPnlBoxValue isPositive={isPositive}>\r\n          {convertKrNumberType(Math.ceil(currentfutureTotalAsset))}\r\n        </UnrealizedPnlBoxValue>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default memo(OpenPositionInfo);\r\n","import { memo } from \"react\";\r\nimport { Text, View } from \"react-native\";\r\nimport convertKrNumberType from \"../../../../functions/convertKrNumberType\";\r\nimport {\r\n  UnrealizedPnlBoxText,\r\n  UnrealizedPnlBoxValue,\r\n} from \"../../../../styles/TextStyledComponents\";\r\n\r\ninterface ProfitInfoBoxProps {\r\n  unrealizedPnl: number;\r\n  profitRate: number;\r\n  isPositive: string;\r\n}\r\n\r\nfunction ProfitInfoBox({\r\n  unrealizedPnl,\r\n  profitRate,\r\n  isPositive,\r\n}: ProfitInfoBoxProps) {\r\n  return (\r\n    <View\r\n      style={{\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-around\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <View style={{ flex: 1.3 }}>\r\n        <UnrealizedPnlBoxText>미실현 손익</UnrealizedPnlBoxText>\r\n        <UnrealizedPnlBoxValue isPositive={isPositive}>\r\n          {convertKrNumberType(Math.ceil(unrealizedPnl))}원{\" \"}\r\n        </UnrealizedPnlBoxValue>\r\n      </View>\r\n      <View style={{ flex: 1 }}>\r\n        <UnrealizedPnlBoxText>수익률</UnrealizedPnlBoxText>\r\n        <UnrealizedPnlBoxValue isPositive={isPositive}>\r\n          {(profitRate * 100).toFixed(2)}%\r\n        </UnrealizedPnlBoxValue>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default memo(ProfitInfoBox);\r\n","import { memo } from \"react\";\r\nimport { Text, View } from \"react-native\";\r\nimport { PositionTitleBoxText } from \"../../../../styles/TextStyledComponents\";\r\nimport theme from \"../../../../styles/theme\";\r\n\r\ninterface TitleBoxProps {\r\n  isLong: boolean;\r\n}\r\n\r\nfunction TitleBox({ isLong }: TitleBoxProps) {\r\n  return (\r\n    <View\r\n      style={{\r\n        marginTop: 5,\r\n        marginBottom: 5,\r\n        width: 20,\r\n        height: 20,\r\n        borderRadius: 4,\r\n        overflow: \"hidden\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        backgroundColor: isLong\r\n          ? theme.colors.positiveTextColor\r\n          : theme.colors.negativeTextColor,\r\n      }}\r\n    >\r\n      <PositionTitleBoxText isLong={isLong}>\r\n        {isLong ? \"롱\" : \"숏\"}\r\n      </PositionTitleBoxText>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default memo(TitleBox);\r\n","import { View } from \"react-native\";\r\nimport { IFutureAccountDetail } from \"../../../interfaces/interface\";\r\nimport CloseButton from \"./components/CloseButton\";\r\nimport PositionSettingInfo from \"./components/CurrentPositionInfo\";\r\nimport LeverageInfoBox from \"./components/LeverageInfoBox\";\r\nimport OpenPositionInfo from \"./components/OpenPositionInfo\";\r\nimport ProfitInfoBox from \"./components/ProfitInfoBox\";\r\nimport TitleBox from \"./components/TitleBox\";\r\n\r\ninterface PositionBoxProps {\r\n  isLong: boolean;\r\n  accountDetail: IFutureAccountDetail;\r\n  closeHandler: () => void;\r\n}\r\n\r\nfunction PositionBox({\r\n  accountDetail,\r\n  closeHandler,\r\n  isLong,\r\n}: PositionBoxProps) {\r\n  return (\r\n    <View style={{ height: \"100%\", flexDirection: \"column\", padding: 5 }}>\r\n      <View style={{ flex: 1, flexDirection: \"row\", paddingRight: 10 }}>\r\n        <View style={{ flex: 1, flexDirection: \"row\", alignItems: \"center\" }}>\r\n          <TitleBox isLong={isLong} />\r\n          <LeverageInfoBox isLong={isLong} leverage={accountDetail.leverage} />\r\n        </View>\r\n        <View style={{ flex: 1 }}>\r\n          <CloseButton isLong={isLong} closeHandler={closeHandler} />\r\n        </View>\r\n      </View>\r\n      <View style={{ flex: 5, justifyContent: \"space-evenly\" }}>\r\n        <ProfitInfoBox\r\n          unrealizedPnl={accountDetail.unrealizedPnl}\r\n          profitRate={accountDetail.profitRate}\r\n          isPositive={accountDetail.isPositive}\r\n        />\r\n        <OpenPositionInfo\r\n          openPositionValue={accountDetail.openPositionValue}\r\n          currentfutureTotalAsset={accountDetail.totalAsset}\r\n          isPositive={accountDetail.isPositive}\r\n        />\r\n        <PositionSettingInfo\r\n          liquidPrice={accountDetail.liquidPrice}\r\n          openPrice={accountDetail.openPrice}\r\n          isLong={isLong}\r\n        />\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default PositionBox;\r\n","import { memo } from \"react\";\r\nimport { IFutureAccountDetail } from \"../../interfaces/interface\";\r\nimport EmptyPositionBox from \"./EmptyPositionBox\";\r\nimport PositionBox from \"./position-box/PositionBox\";\r\n\r\ninterface PositionInfoViewerProps {\r\n  accountDetail: IFutureAccountDetail;\r\n  closeHandler: () => void;\r\n  isLong: boolean;\r\n}\r\n\r\nfunction PositionInfoViewer({\r\n  accountDetail,\r\n  closeHandler,\r\n  isLong,\r\n}: PositionInfoViewerProps) {\r\n  return (\r\n    <PositionBox\r\n      accountDetail={accountDetail}\r\n      closeHandler={closeHandler}\r\n      isLong={isLong}\r\n    />\r\n  );\r\n}\r\n\r\nexport default memo(PositionInfoViewer);\r\n","import { memo, useEffect, useState } from \"react\";\r\nimport { View } from \"react-native\";\r\nimport { useRecoilState, useRecoilValue, useResetRecoilState } from \"recoil\";\r\nimport {\r\n  cashAccountState,\r\n  isCandleMovingState,\r\n  longAccountDetailState,\r\n  longAccountState,\r\n  shortAccountDetailState,\r\n  shortAccountState,\r\n  totalAccountState,\r\n} from \"../../atom\";\r\nimport useComponentSize from \"../../hooks/useComponentSize\";\r\nimport rootStyles from \"../../styles/rootStyles\";\r\nimport CustomVictoryStack from \"../assets/CustomVictoryStack\";\r\nimport EmptyPositionBox from \"./EmptyPositionBox\";\r\nimport PositionInfoViewer from \"./PositionInfoViewer\";\r\n\r\nfunction PositionInfo() {\r\n  const isCandleMoving = useRecoilValue(isCandleMovingState);\r\n\r\n  const [cashAccount, setCashAccount] = useRecoilState(cashAccountState);\r\n  const longAccountDetail = useRecoilValue(longAccountDetailState);\r\n  const resetLongAccount = useResetRecoilState(longAccountState);\r\n  const shortAccountDetail = useRecoilValue(shortAccountDetailState);\r\n  const resetShortAccount = useResetRecoilState(shortAccountState);\r\n  const totalAcount = useRecoilValue(totalAccountState);\r\n\r\n  const [barCashRate, setBarCashRate] = useState(\r\n    totalAcount.cash / totalAcount.totalAsset\r\n  );\r\n  const [barFutureRate, setBarFutureRate] = useState(\r\n    totalAcount.futureValuation / totalAcount.totalAsset\r\n  );\r\n\r\n  const { size, onLayout } = useComponentSize();\r\n\r\n  const longCloseHandler = () => {\r\n    if (!isCandleMoving) {\r\n      setCashAccount((prev) => prev + longAccountDetail.totalAsset);\r\n      resetLongAccount();\r\n    }\r\n  };\r\n\r\n  const shortCloseHandler = () => {\r\n    if (!isCandleMoving) {\r\n      setCashAccount((prev) => prev + shortAccountDetail.totalAsset);\r\n      resetShortAccount();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!isCandleMoving) {\r\n      setBarCashRate(totalAcount.cash / totalAcount.totalAsset);\r\n      setBarFutureRate(totalAcount.futureValuation / totalAcount.totalAsset);\r\n    }\r\n  }, [isCandleMoving, totalAcount]);\r\n\r\n  return (\r\n    <View style={rootStyles.positionInfo}>\r\n      <View style={{ flex: 1 }} onLayout={onLayout}>\r\n        <CustomVictoryStack\r\n          parentSize={size}\r\n          barCashRate={barCashRate}\r\n          barFutureRate={barFutureRate}\r\n          position={longAccountDetail.positionActive}\r\n        />\r\n      </View>\r\n      <View style={{ flex: 2.5 }}>\r\n        {longAccountDetail.positionActive ? (\r\n          <PositionInfoViewer\r\n            accountDetail={longAccountDetail}\r\n            closeHandler={longCloseHandler}\r\n            isLong={true}\r\n          />\r\n        ) : null}\r\n        {shortAccountDetail.positionActive ? (\r\n          <PositionInfoViewer\r\n            accountDetail={shortAccountDetail}\r\n            closeHandler={shortCloseHandler}\r\n            isLong={false}\r\n          />\r\n        ) : null}\r\n        {!longAccountDetail.positionActive &&\r\n        !shortAccountDetail.positionActive ? (\r\n          <EmptyPositionBox />\r\n        ) : null}\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default memo(PositionInfo);\r\n","import { Text, View } from \"react-native\";\r\nimport rootStyles from \"../../../styles/rootStyles\";\r\nimport { BaseTextContainer } from \"../../../styles/TextStyledComponents\";\r\n\r\nfunction Shop() {\r\n  return (\r\n    <View style={rootStyles.shop}>\r\n      <BaseTextContainer>Shop</BaseTextContainer>\r\n      <BaseTextContainer>(준비중)</BaseTextContainer>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default Shop;\r\n","import { memo } from \"react\";\r\nimport {\r\n  GestureResponderEvent,\r\n  StyleSheet,\r\n  Text,\r\n  TouchableOpacity,\r\n  View,\r\n} from \"react-native\";\r\n\r\nconst switchStyle = (\r\n  disabled?: boolean,\r\n  selectedValue?: number | boolean,\r\n  selectedColor?: string,\r\n  nonSelectedColor?: string,\r\n  thisValue?: number | boolean\r\n) => {\r\n  return StyleSheet.create({\r\n    container: {\r\n      backgroundColor: \"transparent\",\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      flexDirection: \"row\",\r\n      opacity: disabled ? 0.5 : 1,\r\n    },\r\n    box: {\r\n      flex: 1,\r\n      padding: 5,\r\n      backgroundColor: \"transprent\",\r\n      borderWidth: 1,\r\n      borderStyle: \"solid\",\r\n      borderColor:\r\n        selectedValue === thisValue ? selectedColor : nonSelectedColor,\r\n      alignItems: \"center\",\r\n    },\r\n  });\r\n};\r\n\r\nconst textStyle = (\r\n  disabled?: boolean,\r\n  selectedValue?: number | boolean,\r\n  selectedColor?: string,\r\n  nonSelectedColor?: string,\r\n  thisValue?: number | boolean\r\n) => {\r\n  return StyleSheet.create({\r\n    text: {\r\n      color: selectedValue === thisValue ? selectedColor : nonSelectedColor,\r\n    },\r\n  });\r\n};\r\n\r\nexport interface CustomToggleSwitchProps {\r\n  options: { label: string; value: number | boolean }[];\r\n  value: number | boolean;\r\n  setValueFunction: React.Dispatch<React.SetStateAction<number | boolean>>;\r\n  disabled?: boolean;\r\n  selectedColor?: string;\r\n  nonSelectedColor?: string;\r\n}\r\n\r\nfunction CustomToggleSwitch({\r\n  options,\r\n  value,\r\n  setValueFunction,\r\n  disabled,\r\n  selectedColor = \"#32D993\",\r\n  nonSelectedColor = \"#bebebe\",\r\n}: CustomToggleSwitchProps) {\r\n  const onPressHandler = (\r\n    evt: GestureResponderEvent,\r\n    newValue: number | boolean\r\n  ) => {\r\n    setValueFunction(newValue);\r\n  };\r\n  return (\r\n    <View style={switchStyle(disabled).container}>\r\n      {options.map((ele, index) => (\r\n        <TouchableOpacity\r\n          key={index}\r\n          onPress={(evt) => onPressHandler(evt, ele.value)}\r\n          style={\r\n            switchStyle(\r\n              disabled,\r\n              value,\r\n              selectedColor,\r\n              nonSelectedColor,\r\n              ele.value\r\n            ).box\r\n          }\r\n          disabled={disabled}\r\n        >\r\n          <Text\r\n            style={\r\n              textStyle(\r\n                disabled,\r\n                value,\r\n                selectedColor,\r\n                nonSelectedColor,\r\n                ele.value\r\n              ).text\r\n            }\r\n          >\r\n            {ele.label}\r\n          </Text>\r\n        </TouchableOpacity>\r\n      ))}\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default memo(CustomToggleSwitch);\r\n","import MultiSlider from \"@ptomasroos/react-native-multi-slider\";\r\nimport { memo } from \"react\";\r\nimport { View } from \"react-native\";\r\nimport { ISize } from \"../../../../../hooks/useComponentSize\";\r\nimport {\r\n  ControlSectionTitleText,\r\n  ControlSectionValueText,\r\n} from \"../../../../../styles/TextStyledComponents\";\r\nimport theme from \"../../../../../styles/theme\";\r\n\r\ninterface AmountSettingBoxProps {\r\n  parentSize: ISize;\r\n  isLongSelected: boolean;\r\n  amountRate: number;\r\n  setAmountRate: (value: number) => void;\r\n}\r\n\r\nfunction AmountSettingBox({\r\n  parentSize,\r\n  isLongSelected,\r\n  amountRate,\r\n  setAmountRate,\r\n}: AmountSettingBoxProps) {\r\n  const amountRateHandler = (value: number[]) => {\r\n    setAmountRate(value[0]);\r\n  };\r\n  return (\r\n    <View\r\n      style={{\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"space-around\",\r\n      }}\r\n    >\r\n      <MultiSlider\r\n        sliderLength={parentSize.width * 0.8 || 200}\r\n        values={[amountRate]}\r\n        onValuesChange={amountRateHandler}\r\n        min={0}\r\n        max={101}\r\n        step={5}\r\n        snapped={true}\r\n        markerStyle={{\r\n          width: 18,\r\n          height: 18,\r\n          backgroundColor: isLongSelected\r\n            ? theme.colors.longButtonColor\r\n            : theme.colors.shortButtonColor,\r\n        }}\r\n        selectedStyle={{\r\n          backgroundColor: isLongSelected\r\n            ? theme.colors.longButtonColor\r\n            : theme.colors.shortButtonColor,\r\n        }}\r\n        trackStyle={{ backgroundColor: theme.colors.toneDownTextColor }}\r\n      />\r\n\r\n      <ControlSectionTitleText> {amountRate}%</ControlSectionTitleText>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default memo(AmountSettingBox);\r\n","import { memo } from \"react\";\r\nimport { Text, View } from \"react-native\";\r\nimport { LEVERAGE_UNITS } from \"../../../../../globalConstant\";\r\nimport { ControlSectionTitleText } from \"../../../../../styles/TextStyledComponents\";\r\nimport theme from \"../../../../../styles/theme\";\r\nimport CustomToggleSwitch from \"../../../../assets/CustomSwitch\";\r\ninterface LeverageControlBoxProps {\r\n  isLongSelected: boolean;\r\n  activeLeverage: number;\r\n  leverage: number;\r\n  setLeverage: React.Dispatch<React.SetStateAction<number>>;\r\n  disabled: boolean;\r\n}\r\n\r\nfunction LeverageControlBox({\r\n  isLongSelected,\r\n  activeLeverage,\r\n  leverage,\r\n  setLeverage,\r\n  disabled,\r\n}: LeverageControlBoxProps) {\r\n  return (\r\n    <View style={{ width: \"100%\", height: \"100%\" }}>\r\n      <View style={{ marginTop: 10 }}>\r\n        <CustomToggleSwitch\r\n          options={LEVERAGE_UNITS}\r\n          value={activeLeverage ? activeLeverage : leverage}\r\n          setValueFunction={setLeverage}\r\n          disabled={disabled}\r\n          selectedColor={\r\n            isLongSelected\r\n              ? theme.colors.longButtonColor\r\n              : theme.colors.shortButtonColor\r\n          }\r\n          nonSelectedColor={theme.colors.toneDownTextColor}\r\n        />\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default memo(LeverageControlBox);\r\n","import { memo } from \"react\";\r\nimport { Text, View } from \"react-native\";\r\nimport convertKrNumberType from \"../../../../../functions/convertKrNumberType\";\r\nimport {\r\n  ControlSectionTitleText,\r\n  ControlSectionValueText,\r\n  LiquidControlSectionValueText,\r\n} from \"../../../../../styles/TextStyledComponents\";\r\n\r\ninterface LiquidPriceBoxProps {\r\n  isLongSelected: boolean;\r\n  longLiquid: number;\r\n  shortLiquid: number;\r\n}\r\n\r\nfunction LiquidPriceBox({\r\n  isLongSelected,\r\n  longLiquid,\r\n  shortLiquid,\r\n}: LiquidPriceBoxProps) {\r\n  return (\r\n    <View style={{ flex: 1 }}>\r\n      <ControlSectionTitleText>청산가</ControlSectionTitleText>\r\n      <LiquidControlSectionValueText isLong={isLongSelected}>\r\n        {isLongSelected\r\n          ? convertKrNumberType(Math.ceil(longLiquid))\r\n          : convertKrNumberType(Math.ceil(shortLiquid))}\r\n      </LiquidControlSectionValueText>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default memo(LiquidPriceBox);\r\n","import { memo } from \"react\";\r\nimport { Text, View } from \"react-native\";\r\nimport convertKrNumberType from \"../../../../../functions/convertKrNumberType\";\r\nimport {\r\n  ControlSectionTitleText,\r\n  ControlSectionValueText,\r\n} from \"../../../../../styles/TextStyledComponents\";\r\n\r\ninterface TotalPriceBoxProps {\r\n  totalPrice: number;\r\n  coinAmount: number;\r\n}\r\n\r\nfunction TotalPriceBox({ totalPrice, coinAmount }: TotalPriceBoxProps) {\r\n  return (\r\n    <View style={{ flexDirection: \"row\", marginTop: 5 }}>\r\n      <View style={{ flex: 1 }}>\r\n        <ControlSectionTitleText>주문총액</ControlSectionTitleText>\r\n        <ControlSectionValueText>\r\n          {convertKrNumberType(Math.ceil(totalPrice))}원\r\n        </ControlSectionValueText>\r\n      </View>\r\n      <View style={{ flex: 1 }}>\r\n        <ControlSectionTitleText>개수</ControlSectionTitleText>\r\n        <ControlSectionValueText>\r\n          {convertKrNumberType(coinAmount)}\r\n        </ControlSectionValueText>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default memo(TotalPriceBox);\r\n","import { memo } from \"react\";\r\nimport { Text, TouchableOpacity } from \"react-native\";\r\nimport { OpenButtonContainer } from \"../../../../../styles/buttonStyles\";\r\nimport { OpenButtonText } from \"../../../../../styles/TextStyledComponents\";\r\n\r\ninterface TradeButtonProps {\r\n  isCandleMoving: boolean;\r\n  buttonHandler: () => void;\r\n  isBuy: boolean;\r\n}\r\n\r\nfunction TradeButton({\r\n  isCandleMoving,\r\n  buttonHandler,\r\n  isBuy,\r\n}: TradeButtonProps) {\r\n  return (\r\n    <OpenButtonContainer\r\n      isLong={isBuy}\r\n      onPress={buttonHandler}\r\n      disabled={isCandleMoving}\r\n    >\r\n      <OpenButtonText isLong={isBuy}>\r\n        {isBuy ? \"BUY / 롱\" : \"Sell / 숏\"}\r\n      </OpenButtonText>\r\n    </OpenButtonContainer>\r\n  );\r\n}\r\n\r\nexport default memo(TradeButton);\r\n","import { cloneDeep } from \"lodash\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport { View } from \"react-native\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport {\r\n  cashAccountState,\r\n  isCandleMovingState,\r\n  isLongControllerActiveState,\r\n  lastClosePriceState,\r\n  longAccountDetailState,\r\n  longAccountState,\r\n  longLiquidState,\r\n  shortAccountDetailState,\r\n  shortAccountState,\r\n  shortLiquidState,\r\n} from \"../../../../atom\";\r\nimport { TRANSACTION_FEE_RATE } from \"../../../../globalConstant\";\r\nimport useComponentSize from \"../../../../hooks/useComponentSize\";\r\nimport AmountSettingBox from \"./components/AmountSettingBox\";\r\n\r\nimport LeverageControlBox from \"./components/LeverageControlBox\";\r\nimport LiquidPriceBox from \"./components/LiquidPriceBox\";\r\nimport TotalPriceBox from \"./components/TotalPriceBox\";\r\nimport TradeButton from \"./components/TradeButton\";\r\n\r\nfunction TradeController({\r\n  disabled,\r\n  activeLeverage,\r\n}: {\r\n  disabled: boolean;\r\n  activeLeverage?: number;\r\n}) {\r\n  // Account System\r\n  const [cashAccount, setCashAccount] = useRecoilState(cashAccountState);\r\n  const [longLiquid, setLongLiquid] = useRecoilState(longLiquidState);\r\n  const [shortLiquid, setShortLiquid] = useRecoilState(shortLiquidState);\r\n  const lastClosePrice = useRecoilValue(lastClosePriceState);\r\n  const [longAccount, setLongAccount] = useRecoilState(longAccountState);\r\n  const [shortAccount, setShortAccount] = useRecoilState(shortAccountState);\r\n  const longAccountDetail = useRecoilValue(longAccountDetailState);\r\n  const shortAccountDetail = useRecoilValue(shortAccountDetailState);\r\n  // UI System\r\n  const isCandleMoving = useRecoilValue(isCandleMovingState);\r\n  const isLongSelected = useRecoilValue(isLongControllerActiveState);\r\n\r\n  const [leverage, setLeverage] = useState(1);\r\n  const [amountRate, setAmountRate] = useState(0);\r\n  const [totalPrice, setTotalPrice] = useState(0);\r\n  const [coinAmount, setCoinAmount] = useState(0);\r\n\r\n  const { size, onLayout } = useComponentSize();\r\n\r\n  const buyButtonHandler = useCallback(() => {\r\n    if (isLongSelected) {\r\n      if (!isCandleMoving) {\r\n        setCashAccount((prev) => prev - totalPrice);\r\n        if (shortAccountDetail.positionActive) {\r\n          alert(\"Long 포지션과 Short 포지션을 동시에 보유할 수 없습니다.\");\r\n        } else if (!longAccountDetail.positionActive && coinAmount > 0) {\r\n          const newLongAccount = {\r\n            positionActive: true,\r\n            openPrice: lastClosePrice,\r\n            liquidPrice: longLiquid,\r\n            leverage: leverage,\r\n            openPositionValue: lastClosePrice * coinAmount,\r\n            openPositionAmount: coinAmount,\r\n            currentPositionValue: lastClosePrice * coinAmount,\r\n          };\r\n          setLongAccount(newLongAccount);\r\n        } else if (longAccountDetail.positionActive && coinAmount > 0) {\r\n          setLongAccount((prev) => {\r\n            const newLog = cloneDeep(prev);\r\n            const newOpenPositionValue = lastClosePrice * coinAmount;\r\n            newLog.openPrice =\r\n              (newLog.openPrice * newLog.openPositionAmount +\r\n                newOpenPositionValue) /\r\n              (newLog.openPositionAmount + coinAmount);\r\n\r\n            newLog.openPositionAmount = newLog.openPositionAmount + coinAmount;\r\n\r\n            newLog.openPositionValue =\r\n              newLog.openPositionValue + newOpenPositionValue;\r\n\r\n            newLog.currentPositionValue =\r\n              newLog.currentPositionValue + newOpenPositionValue;\r\n\r\n            newLog.liquidPrice = newLog.openPrice * (1 - 1 / newLog.leverage);\r\n            return newLog;\r\n          });\r\n        } else if (coinAmount === 0) {\r\n          alert(\"0개는 주문할 수 없습니다.\");\r\n        }\r\n        setAmountRate(0);\r\n      }\r\n    }\r\n  }, [\r\n    isLongSelected,\r\n    isCandleMoving,\r\n    longAccountDetail,\r\n    totalPrice,\r\n    coinAmount,\r\n  ]);\r\n\r\n  const sellButtonHandler = useCallback(() => {\r\n    if (!isLongSelected) {\r\n      if (!isCandleMoving) {\r\n        setCashAccount((prev) => prev - totalPrice);\r\n        if (longAccountDetail.positionActive) {\r\n          alert(\"Long 포지션과 Short 포지션을 동시에 보유할 수 없습니다.\");\r\n        } else if (!shortAccountDetail.positionActive && coinAmount > 0) {\r\n          const newShortAccount = {\r\n            positionActive: true,\r\n            openPrice: lastClosePrice,\r\n            liquidPrice: shortLiquid,\r\n            leverage: leverage,\r\n            openPositionValue: lastClosePrice * coinAmount,\r\n            openPositionAmount: coinAmount,\r\n            currentPositionValue: lastClosePrice * coinAmount,\r\n          };\r\n          setShortAccount(newShortAccount);\r\n        } else if (shortAccountDetail.positionActive && coinAmount > 0) {\r\n          setShortAccount((prev) => {\r\n            const newLog = cloneDeep(prev);\r\n            const newOpenPositionValue = lastClosePrice * coinAmount;\r\n            newLog.openPrice =\r\n              (newLog.openPrice * newLog.openPositionAmount +\r\n                newOpenPositionValue) /\r\n              (newLog.openPositionAmount + coinAmount);\r\n\r\n            newLog.openPositionAmount = newLog.openPositionAmount + coinAmount;\r\n\r\n            newLog.openPositionValue =\r\n              newLog.openPositionValue + newOpenPositionValue;\r\n\r\n            newLog.currentPositionValue =\r\n              newLog.currentPositionValue + newOpenPositionValue;\r\n\r\n            newLog.liquidPrice = newLog.openPrice * (1 + 1 / newLog.leverage);\r\n            return newLog;\r\n          });\r\n        } else if (coinAmount === 0) {\r\n          alert(\"0개는 주문할 수 없습니다.\");\r\n        }\r\n        setAmountRate(0);\r\n      }\r\n    }\r\n  }, [\r\n    isLongSelected,\r\n    isCandleMoving,\r\n    shortAccountDetail,\r\n    totalPrice,\r\n    coinAmount,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    const targetCash = (cashAccount * amountRate) / 100;\r\n    const ableCoinAmount = Math.floor(\r\n      targetCash /\r\n        (lastClosePrice * (1 + (TRANSACTION_FEE_RATE / 100) * leverage))\r\n    );\r\n    setCoinAmount(ableCoinAmount);\r\n  }, [amountRate, leverage]);\r\n\r\n  useEffect(() => {\r\n    setTotalPrice(\r\n      lastClosePrice *\r\n        coinAmount *\r\n        (1 + (TRANSACTION_FEE_RATE / 100) * leverage)\r\n    );\r\n  }, [lastClosePrice, coinAmount]);\r\n\r\n  useEffect(() => {\r\n    if (isCandleMoving) {\r\n      setLongLiquid(0);\r\n      setShortLiquid(0);\r\n    } else {\r\n      if (isLongSelected) {\r\n        setLongLiquid(lastClosePrice * (1 - 1 / leverage));\r\n      } else {\r\n        setShortLiquid(lastClosePrice * (1 + 1 / leverage));\r\n      }\r\n    }\r\n    return () => {\r\n      setLongLiquid(0);\r\n      setShortLiquid(0);\r\n    };\r\n  }, [lastClosePrice, leverage, isCandleMoving, isLongSelected]);\r\n\r\n  useEffect(() => {\r\n    if (isCandleMoving) {\r\n      setAmountRate(0);\r\n    }\r\n  }, [isCandleMoving]);\r\n\r\n  return (\r\n    <View style={{ height: \"100%\", width: \"100%\" }} onLayout={onLayout}>\r\n      <View style={{ flex: 0.8 }}>\r\n        <LeverageControlBox\r\n          isLongSelected={isLongSelected}\r\n          activeLeverage={activeLeverage}\r\n          leverage={leverage}\r\n          setLeverage={setLeverage}\r\n          disabled={disabled}\r\n        />\r\n      </View>\r\n      <View style={{ flex: 1.5, justifyContent: \"space-around\", padding: 3 }}>\r\n        <TotalPriceBox totalPrice={totalPrice} coinAmount={coinAmount} />\r\n        <AmountSettingBox\r\n          parentSize={size}\r\n          isLongSelected={isLongSelected}\r\n          amountRate={amountRate}\r\n          setAmountRate={setAmountRate}\r\n        />\r\n      </View>\r\n      <View style={{ flex: 1, flexDirection: \"row\" }}>\r\n        <View style={{ flex: 1 }}>\r\n          <LiquidPriceBox\r\n            isLongSelected={isLongSelected}\r\n            longLiquid={longLiquid}\r\n            shortLiquid={shortLiquid}\r\n          />\r\n        </View>\r\n        <View style={{ flex: 3, alignItems: \"center\" }}>\r\n          {isLongSelected ? (\r\n            <TradeButton\r\n              isCandleMoving={isCandleMoving}\r\n              buttonHandler={buyButtonHandler}\r\n              isBuy={true}\r\n            />\r\n          ) : (\r\n            <TradeButton\r\n              isCandleMoving={isCandleMoving}\r\n              buttonHandler={sellButtonHandler}\r\n              isBuy={false}\r\n            />\r\n          )}\r\n        </View>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default TradeController;\r\n","import { useRecoilValue } from \"recoil\";\r\nimport { longAccountDetailState } from \"../../../../atom\";\r\nimport TradeController from \"./TradeController\";\r\n\r\nfunction LongTradeController() {\r\n  const longAccountDetail = useRecoilValue(longAccountDetailState);\r\n\r\n  return (\r\n    <TradeController\r\n      disabled={longAccountDetail.positionActive}\r\n      activeLeverage={\r\n        longAccountDetail.positionActive ? longAccountDetail.leverage : null\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nexport default LongTradeController;\r\n","import { useRecoilValue } from \"recoil\";\r\nimport { shortAccountDetailState } from \"../../../../atom\";\r\nimport TradeController from \"./TradeController\";\r\n\r\nfunction ShortTradeController() {\r\n  const shortAccountDetail = useRecoilValue(shortAccountDetailState);\r\n  return (\r\n    <TradeController\r\n      disabled={shortAccountDetail.positionActive}\r\n      activeLeverage={\r\n        shortAccountDetail.positionActive ? shortAccountDetail.leverage : null\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nexport default ShortTradeController;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Text, View } from \"react-native\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { isLongControllerActiveState } from \"../../../atom\";\r\nimport rootStyles from \"../../../styles/rootStyles\";\r\nimport theme from \"../../../styles/theme\";\r\nimport CustomToggleSwitch from \"../../assets/CustomSwitch\";\r\nimport LongTradeController from \"./trade-controller/LongTradeController\";\r\nimport ShortTradeController from \"./trade-controller/ShortTradeController\";\r\n\r\nfunction Trade() {\r\n  const [isLongSelected, setIsLongSelected] = useRecoilState(\r\n    isLongControllerActiveState\r\n  );\r\n  return (\r\n    <View style={rootStyles.trade}>\r\n      <View style={{ flex: 1, backgroundColor: theme.colors.backgroundColor1 }}>\r\n        <CustomToggleSwitch\r\n          options={[\r\n            { label: \"롱\", value: true },\r\n            { label: \"숏\", value: false },\r\n          ]}\r\n          value={isLongSelected}\r\n          setValueFunction={setIsLongSelected}\r\n          selectedColor={\r\n            isLongSelected\r\n              ? theme.colors.longButtonColor\r\n              : theme.colors.shortButtonColor\r\n          }\r\n          nonSelectedColor={theme.colors.toneDownTextColor}\r\n        />\r\n      </View>\r\n      <View style={{ flex: 6, backgroundColor: theme.colors.backgroundColor1 }}>\r\n        {isLongSelected ? <LongTradeController /> : <ShortTradeController />}\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default Trade;\r\n","import { ScrollView, View } from \"react-native\";\r\n\r\nimport rootStyles from \"../../styles/rootStyles\";\r\nimport Shop from \"./shop/Shop\";\r\nimport Trade from \"./trade/Trade\";\r\n\r\nfunction ControlPanel() {\r\n  return (\r\n    <View style={rootStyles.controlPanel}>\r\n      <Shop />\r\n      <Trade />\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default ControlPanel;\r\n","import { Text, TouchableOpacity, View } from \"react-native\";\r\nimport { useRecoilState, useResetRecoilState } from \"recoil\";\r\nimport {\r\n  cashAccountState,\r\n  isCandleMovingState,\r\n  longAccountState,\r\n  shortAccountState,\r\n  turnNumberState,\r\n} from \"../../atom\";\r\nimport {\r\n  AccountResetButtonContainer,\r\n  BaseButton,\r\n  NextTurnButtonContainer,\r\n} from \"../../styles/buttonStyles\";\r\nimport rootStyles from \"../../styles/rootStyles\";\r\nimport {\r\n  NextTurnButtonText,\r\n  ResetButtonText,\r\n} from \"../../styles/TextStyledComponents\";\r\n\r\nfunction RootControlButton() {\r\n  const [turnNumber, setTurnNumber] = useRecoilState(turnNumberState);\r\n  const resetCashAccount = useResetRecoilState(cashAccountState);\r\n  const resetLongAccount = useResetRecoilState(longAccountState);\r\n  const resetShortAccount = useResetRecoilState(shortAccountState);\r\n  const [isCandleMoving, setIsCandleMoving] =\r\n    useRecoilState(isCandleMovingState);\r\n  const nextTurnHandler = () => {\r\n    setIsCandleMoving(true);\r\n    setTurnNumber((prev) => prev + 1);\r\n  };\r\n  const resetButtonHandler = () => {\r\n    resetCashAccount();\r\n    resetLongAccount();\r\n    resetShortAccount();\r\n  };\r\n\r\n  return (\r\n    <View style={rootStyles.rootControlButton}>\r\n      <View\r\n        style={{ flex: 1, justifyContent: \"flex-start\", alignItems: \"center\" }}\r\n      >\r\n        <AccountResetButtonContainer\r\n          onPress={resetButtonHandler}\r\n          disabled={isCandleMoving}\r\n        >\r\n          <ResetButtonText>리셋</ResetButtonText>\r\n        </AccountResetButtonContainer>\r\n      </View>\r\n      <View\r\n        style={{\r\n          flex: 3.5,\r\n          justifyContent: \"flex-start\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <NextTurnButtonContainer\r\n          onPress={nextTurnHandler}\r\n          disabled={isCandleMoving}\r\n        >\r\n          <NextTurnButtonText>Next Turn</NextTurnButtonText>\r\n        </NextTurnButtonContainer>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default RootControlButton;\r\n","import { View } from \"react-native\";\r\nimport rootStyles from \"../styles/rootStyles\";\r\nimport MiddleAccount from \"./account/MiddleAccount\";\r\nimport TopAccount from \"./account/TopAccount\";\r\nimport Chart from \"./chart/Chart\";\r\nimport PositionInfo from \"./position-info/PositionInfo\";\r\nimport ControlPanel from \"./control-panel/ControlPanel\";\r\nimport RootControlButton from \"./root-control-button/RootControlButton\";\r\n\r\nfunction Display() {\r\n  return (\r\n    <>\r\n      <View style={rootStyles.display}>\r\n        <TopAccount />\r\n        <Chart />\r\n        <MiddleAccount />\r\n        <PositionInfo />\r\n        <ControlPanel />\r\n        <RootControlButton />\r\n      </View>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Display;\r\n","import { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components/native\";\nimport Display from \"./components/Display\";\nimport theme from \"./styles/theme\";\n\nexport default function App() {\n  return (\n    <RecoilRoot>\n      <ThemeProvider theme={theme}>\n        <Display />\n      </ThemeProvider>\n    </RecoilRoot>\n  );\n}\n"],"sourceRoot":""}